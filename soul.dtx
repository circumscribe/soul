% \iffalse
%% File: soul.dtx  Copyright (C) 1998, 1999, 2001  Melchior FRANZ
%% $Id$
%
%<*batchfile>
%
%     (1)  run `soul.dtx' through LaTeX to get `soul.ins',
%          (if you don't already have it)
%
%     (2)  run `soul.ins' through (La)TeX to get
%          the package `soul.sty'
%
%          [or use `docstrip', and extract `soul.sty' from `soul.dtx'
%           using option `package']
%
%     (3)  now run `soul.dtx' three times through LaTeX
%          to get the documentation file `soul.dvi'
%
%
%% ====================================================================
%%  @LaTeX-package-file{
%%     author          = "Melchior FRANZ",
%%     version         = "2.0",
%%     date            = "99 999 2001",
%%     filename        = "soul.dtx",
%%     address         = "Melchior FRANZ
%%                        Rieder Hauptstrasse 52
%%                        A-5212 SCHNEEGATTERN
%%                        AUSTRIA",
%%     telephone       = "++43 7746 3109",
%%     URL             = "http://www.unet.univie.ac.at/~a8603365/",
%%     email           = "a8603365@unet.univie.ac.at",
%%     codetable       = "ISO/ASCII",
%%     keywords        = "spacing out, letterspacing, underlining, striking out",
%%     supported       = "yes",
%%     docstring       = "This article describes the `soul' package, which
%%                        provides hyphenateable letterspacing (spacing out),
%%                        underlining, and some derivatives.
%%                        All features are based upon a common mechanism 
%%                        that allows to typeset text syllable by syllable,
%%                        where the excellent TeX hyphenation algorithm is
%%                        used to find the proper hyphenation points.
%%                        Two examples show how to use the provided interface to
%%                        implement things such as `an-a-lyz-ing syl-la-bles'.
%%                        Although the package is optimized for LaTeX2e,
%%                        it works with Plain TeX and with other
%%                        packages, too.",
%%  }
%% ====================================================================
%
% COPYRIGHT NOTICE:
% This package is free software that can be redistributed and/or modified
% under the terms of the LaTeX Project Public License as specified
% in the file macros/latex/base/lppl.txt on any CTAN archive server.
%
%
%
\begin{filecontents}{soul.ins}
\def\batchfile{soul.ins}
\input docstrip.tex
\askforoverwritefalse
\keepsilent   % <-- this is for you, Christina   ;-)
\generate{\file{soul.sty}{\from{soul.dtx}{package}}}
\endbatchfile
\end{filecontents}
%</batchfile>
%
%
%
%<*driver>
\def\fileversion{2.0}
\def\filedate{2001/99/99}
%
%
%^^A  the `draft' option is needed for demonstration
\documentclass[draft]{ltxdoc}
%
%
\IfFileExists{soul.sty}
  {\usepackage{soul}[2001/99/99]\let\SOULSTYfound\active}%
  {\GenericWarning{soul.dtx}%
    {Package file `soul.sty' couldn't be found. You should however find^^J^^A
     a file `soul.ins' in the current directory. If you type "tex soul.ins"^^J^^A
     on the command line, `soul.sty' will be processed for you. After that
     run "latex soul.dtx" again and you won't see that message again.}}%
%
%
%
\makeatletter
\ifx\SOULSTYfound\active
%
%^^A  analyze syllables -- described somewhere below 
% 
  \DeclareRobustCommand*\sy{%
    \def\SOUL@preamble{\lefthyphenmin0\righthyphenmin0}%
    \def\SOUL@everyspace##1{##1\space}%
    \let\SOUL@postamble\relax
    \def\SOUL@everyhyphen{\SOUL@removelastkern
      \discretionary{\SOUL@setkern\SOUL@charkern\char\hyphenchar\font}%
      {}{\hbox{\kern.5pt$\cdot$\kern.5pt}}}%
    \let\SOUL@everysyllable\relax
    \def\SOUL@everytoken{\the\SOUL@token\SOUL@setkern\SOUL@charkern}%
    \SOUL@}%
%
%^^A  analyze the interface -- described somewhere below, too
%
  \DeclareRobustCommand*\an{%
    \def\SOUL@preamble{$^{^P}$}%
    \def\SOUL@everyspace##1{##1\texttt{\char`\ }}%
    \def\SOUL@postamble{$^{^E}$}%
    \def\SOUL@everyhyphen{$^{^h}$}%
    \def\SOUL@everyexhyphen##1{##1$^{^H}$}%
    \def\SOUL@everysyllable{$^{^S}$}%
    \def\SOUL@everytoken{\the\SOUL@token$^{^T}$}%
    \SOUL@}
%
%^^A  magazine-like (truly awful) paragraphs
%^^A  (This macro was part of v1.0.  I took this out of the package,
%^^A  after I was warned, that one would not see any difference between
%^^A  M$-Wood and TeX documents in the future, after which I had sleepless nights...   ;-)
%^^A  If you know what you're doing, you can copy it to your personal `soul.cfg' file.
%
  \DeclareRobustCommand*\magstylepar{\SOUL@sosetup
    \def\SOUL@preamble{%
      \edef\SOUL@soletterskip{\z@\@plus\fontdimen2\font\@minus\z@}%
      \edef\SOUL@soinnerskip{\the\fontdimen2\font
        \@plus\the\fontdimen3\font\@minus\the\fontdimen4\font}%
      \let\SOUL@soouterskip\SOUL@soinnerskip
      \SOUL@sopreamble}%
    \lefthyphenmin2\righthyphenmin2\SOUL@}
%
\else
%
%^^A  The package has not been found, so we're providing some dummies, just
%^^A  to avoid all these `Undefined command sequence' messages.
% 
  \def\SOULDUMMY#1{\textbf{??}}%
  \let\so\SOULDUMMY
  \let\caps\SOULDUMMY
  \let\ul\SOULDUMMY
  \let\st\SOULDUMMY
  \let\sy\SOULDUMMY
  \let\an\SOULDUMMY
  \let\magstylepar\SOULDUMMY
  \def\sodef#1#2#3#4{\SOULDUMMY}%
\fi
\makeatother
%
%^^A  similar to the `description' environment
%
\newenvironment{labeling}[1]{%
  \list{}{%
    \settowidth{\labelwidth}{\textbf{#1}}%
    \leftmargin\labelwidth
    \advance\leftmargin\labelsep
    \def\makelabel##1{\textbf{##1}\hfil}%
  }}%
  {\endlist}
%
%
\newcommand*\DescribeOption[1]{\marginpar{\raggedleft\textsf{#1}\ignorespaces}}
%
%
%
%
%
%\RecordChanges
%
\begin{document}
\setcounter{tocdepth}{2}
\DocInput{soul.dtx}
\end{document}
%</driver>
% \fi
%
%
% \CheckSum{1249}
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \title{The \texttt{soul} package}
%
% \author{Melchior \caps{FRANZ}}
%
% \date{??? ??, 2001}
%
% \maketitle
%
%^^A=====================================================
%
%^^A  These slightly complicated macros allow to typeset the `example' sections
%^^A  conveniently. You'd better ignore them, since they are not thought to be
%^^A  good style...                                            ;-)
%
% \makeatletter
%
% \def\squarebull{\rule[.2ex]{.8ex}{.8ex}}
%
% \newenvironment{examples}
%   {\parindent\z@\small\fontencoding{OT1}\selectfont}
%   {\rule{\hsize}{.4pt}}
% 
% \def\soultest#1|{\bgroup\rule[.5ex]{\hsize}{.4pt}\par
%   \parbox[t]{.34\hsize}{\raggedright\textit{#1\unskip.}}%
%   \hspace{1.5em}$\vtop\bgroup\hb@xt@.4\hsize\bgroup
%   \llap{\squarebull\hspace{.4em}}\soulttest}
%
% {\catcode`\|=13\gdef\soulttest{%
%   \bgroup\def\do##1{\catcode`##1=12}\dospecials\ttfamily
%   \catcode`\|=13\unskip\def|{\hss\egroup\egroup\soultttest}}}
%
% \def\soultttest#1{\hbox{\vtop{\hsize.4\hsize\hbadness\@M
%   \leavevmode\llap{\squarebull\hspace{.4em}}#1}}%
%   \egroup$\hspace{1.5em}\parbox[t]{1cm}{\hyphenpenalty-\@M
%   \exhyphenpenalty-\@M\hbadness\@M\hfuzz\maxdimen
%   \strut\llap{\squarebull\hspace{.4em}}#1}%
%   \goodbreak\vspace{2ex}
%   \egroup}
%
% \makeatother
%^^A=====================================================
%
%
% \changes{v1.0}{1998/10/16}{Initial version}%
%^^A  due to an error in the documentation of v1.0, there's no v1.1    :-(
% \changes{v1.1a}{1998/12/08}{fixed a bunch of bugs; `magstylepar command
%   banned; `caps introduced; `so and `caps recognize following spaces;
%   error message added; `so parameters are mandatory}
%
% \changes{v1.2}{1999/01/11}{fixed the newline bug; added the `\(>\) command}
%
% \changes{v1.3}{1999/05/15}{changed allowhyphen, preambles; added a paragraph
%   in the `features' section}
%
% \changes{v???}{????/??/??}{Alexander SHIBAKOV}
%
% \begin{abstract}
% This article describes the \texttt{soul} package^^A
%^^A%%
%   \footnote{This file has version number \fileversion, last revised \filedate.\\
%   I'd like to thank \caps{Stefan Ulrich} for teaching me much about high quality
%   typesetting, sending me dozens of error reports, and, finally, providing the
%   `example.cfg' configuration file. Without his help the package would only be half 
%   as good. And, no, he had nothing to do with \so{minuscules letterspacing,}
%   \ul{underlining}, and such \dots},
%^^A%%
% which provides \so{hyphenateable letterspacing (spacing out),} \ul{underlining},
% and some derivatives such as \caps{majuscules letterspacing} that
% might be needed for high quality typesetting.
% All features are based upon a common mechanism that allows to
% typeset text syllable by syllable using \TeX's excellent
% hyphenation algorithm to find the proper hyphenation points.
% Two examples show how to use the provided interface to
% implement things such as `\sy{analyzing syllables}'.
%
% Although the package is optimized for \LaTeXe, it works with
% Plain \TeX\ and with other packages, too.
% By the way, the package name |soul|
% is only a combination of the two macro names |\so| (\emph{space out})
% and |\ul| (\emph{underline})---nothing poetic at all \dots^^A   :-( 
% \end{abstract}
%
%
% {\parskip0pt\tableofcontents }
% \addtocontents{toc}{\protect\begin{multicols}{2}}
%
%
%
%
%
%
% \section{Introduction}
%
% There are several possibilities to emphasize parts of a paragraph,
% where not all are considered to be good style. While underlining
% is commonly rejected, experts dispute about whether letterspacing
% should be used or not, and in which cases. If you are not interested
% in such debates, you may well skip over the next section.
% 
%
%
% 
% \section{Typesetting rules}
% 
% \subsection[Theory]{Theory \dots}
% \label{sec:theory}
% 
% To understand the expert's arguments we have to know about the 
% conception of \emph{page greyness.} The sum of all characters on 
% a page represents a certain amount of greyness, provided that
% the letters are printed black onto white paper.
% 
% \caps{Jan Tschichold} \cite{Tschichold}, a well known and recognized
% typographer, accepts only forms of emphasizing, which do not disturb this
% greyness. This is only true of italic shape, caps, and
% caps-and-small-caps fonts, but not of ordinary letterspacing, underlining,
% bold face type, and so on, all of which appear as either dark or light
% spots in the text area. In his opinion emphasized text shall not catch the eye when
% running over the text, but rather when actually reading the respective words.
% 
% Other, less restrictive typographers \cite{Willberg} call this kind of emphasizing
% to be `integrated' or `aesthetic', while they describe `active' emphasizing apart from it,
% which actually \emph{has} to catch the reader's eye. To the latter group belong commonly
% despised things like letterspacing, demibold face type and even underlined and colored text!
%
% On the other hand, \caps{Tschichold} suggests
% to space out caps and caps-and-small-caps fonts on title pages, headings and running headers from
% 1\,pt up to 2\,pt.
% Even in running text readability of uppercase letters should be improved with slight
% letterspacing, since (the Roman) majuscules don't look right, if they are spaced
% like (the Carolingian) minuscules.\footnote{This suggestion is followed throughout this article,
% although Prof.~\caps{Knuth} already considered slight letterspacing with his |cmcsc| fonts.}
%
%
%
%\subsection{\dots\ and Practice}
%
% However, in the last centuries letterspacing was excessively used,
% underlining at least sometimes, because the old \emph{Fraktur} fonts
% could not use capitals or italic shape for emphasizing. This tradition is wideley
% continued until today.
%
% The \caps{Duden} \cite{Duden}, a well known German dictionary, tells us how to space out properly:
% \emph{Punctuation marks are spaced out like letters, except quotation marks and periods.
% Numbers are never spaced out. The German syllable \mbox{\emph{-sche}} is not spaced
% out in cases like \emph{``der {\so{Virchow{sche}}} Versuch''}\footnote{the \caps{Virchow} experiment}. 
% In the old German \emph{Fraktur} fonts the ligatures \emph{|ch|, |ck|, |sz|~(\ss),} and~\emph{|tz|} are
% not broken within spaced out text.}
%
% While some books follow all these rules \cite{Muszynski}, others don't
% \cite{Reglement}. (In fact, most books in my personal library do \emph{not} space out commas.)
%
%
%
%
%
% \section{Modes and options}
%
% The |soul| package has a \LaTeXe\ mode, which is selected if the |\documentclass|
% command can be found, and a \emph{plain} \TeX\ mode, which is selected otherwise. These
% modes differ in some points:
%
%
% \subsection{\LaTeXe\ mode}
%
% This mode provides a package option \textsf{capsdefault} (see section \ref{sec:somacros}) and 
% two package options \textsf{nooverlap} and \textsf{overlap},
% where the latter is selected by default. These options deal with the way underlines
% are typeset. They are described in section \ref{sec:dvips}, but you'll hardly
% ever need to know about them. The \LaTeXe\ mode provides an intelligent |\caps| command
% and makes commands `robust' where it is desired. Furthermore, it tries to load
% a file `soul.cfg', where local stuff is to be placed in. (See the
% file `example.cfg', which implements a fairly complete |\caps| data base.)
%
%
% \subsection{Plain \TeX\ mode}
% This mode implements the respective options as commands |\overlap| and |\nooverlap|,
% and provides a simplified |\caps| command. The `fragile' commands
% |\so|, |\caps|, |\ul|, and~|\st| are to be protected by the user, 
% if they are used in expanding environments such as |\write| arguments.
% 
%
% \subsection{Command summary}
%
% Those commands marked with an asterisk are only accessible in \LaTeXe\ mode:
%
% \medskip\noindent
% {\catcode`\|=12
% \newcommand*\Ast{\rlap{$^\ast$}}
% \begin{tabular}{r@{\hspace{1.5em}}l}
% \hline\\[-1ex]
% \verb+\so{letterspacing}+&\so{letterspacing}\\
% \verb+\caps{CAPITALS, Small Capitals}+&\caps{CAPITALS, Small Capitals}\\
% \verb+\ul{underlining}+&\ul{underlining}\\
% \verb+\st{striking out}+&\st{striking out}\\[1.5ex]\hline\\[-1ex]
% \verb+\sodef\cs{1em}{2em}{3em}+&\textit{define new spacing command} \verb+\cs+\\
% \verb+\resetso+&\textit{reset} \verb+\so+ \textit{dimensions}\\
% \verb+\capsreset+\Ast&\textit{clear caps data set}\\
% \verb+\capsdef{////}{1em}{2em}{3em}+\Ast&\textit{define (default)} \verb+\caps+ \textit{data entry}\\
% \verb+\capssave\cs+\Ast&\textit{save} \verb+\caps+ \textit{data set under name} \verb+\cs+\\
% \verb+\setul{1ex}{2ex}+&\textit{set} \verb+\ul+ \textit{dimensions}\\
% \verb+\resetul+& \textit{reset} \verb+\ul+ \textit{dimensions}\\
% \verb+\setuldepth{y}+& \textit{set underline depth to depth of} \verb+y+\\
% \verb+\setulcolor{y}+\Ast& \textit{set underline color to} \verb+y+\\[1.5ex]\hline
% \end{tabular}}
%
%
%
%
%
%
% 
% \section{\so{Letterspacing}}
% 
% \subsection{The macros}
% \label{sec:somacros}
%
% The base macro for letterspacing is called |\so|\DescribeMacro{\so}.
% It typesets the given argument with a certain
% amount of \textit{inter-letter space} between every two tokens,
% \textit{inner space} between words, and \textit{outer space}
% before and after the spaced out text in case there is a space
% preceding and following,  whereby all kerning values are automatically
% reinserted at the right places.  To enforce normal spaces instead of 
% \textit{outer spaces}, you can `hide' preceding spaces with a 
% |\null| before the |\so| command, and following spaces with any other
% token such as |\relax| or just an opening or closing brace afterwards.
%
% The values are predefined for typesetting facsimiles mainly with
% \emph{Fraktur} fonts.
% You can define your own spacing
% macros or overwrite the original |\so| meaning using the macro
% |\sodef|\DescribeMacro{\sodef}:
%
% \medskip\noindent
% |\sodef|^^A
% $\langle$\textit{cmd}$\rangle$^^A
% |{|$\langle$\textit{font}$\rangle$|}|^^A
% |{|$\langle$\textit{inter-letter space}$\rangle$|}|^^A
% |{|$\langle$\textit{inner space}$\rangle$|}|^^A
% |{|$\langle$\textit{outer space}$\rangle$|}|
% \medbreak
%
% \noindent
% The space dimensions, all of which are mandatory, should be defined in terms of |em|
% letting them grow and shrink with the respective fonts.
%
% \medskip\noindent
% Example: |\sodef\an{}{.2em}{1em plus1em}{2em plus.1em minus.1em}|
%
% \medbreak\noindent
% after which you can type `|\an{example}|' to get
% {\sodef\an{}{.2em}{1em plus1em}{2em plus.1em minus.1em}^^A
% `\an{example}'.}
% \DescribeMacro{\resetso}The |\resetso| command resets |\so|
% to its original meaning.
%
%
% For typesetting caps or caps-and-small-caps fonts there are
% two different \DescribeMacro{\caps}|\caps| commands predefined with only
% slight spacing, which are mainly thought to be used in running text
% (see section \ref{sec:theory}). The following lines show the effect
% of |\caps| in comparison with the normal textfont and with
% small-capitals shape: 
%
% \def\sampletext{DONAUDAMPFSCHIFFAHRTSGESELLSCHAFT}
% \medskip\noindent
% \begin{tabular}{rl}
% |\normalfont|&\sampletext\\
% |\scshape|&{\scshape\sampletext}\\
% |\caps|&\null\expandafter\caps\expandafter{\sampletext}
% \end{tabular}
%
% \medbreak\noindent
% In \emph{plain} \TeX\ mode the |\caps| command is
% simply defined with |\sodef|. It executes a command |\capsfont| that 
% is ignored by default and may be used to select a particular font.
%
% \medskip\noindent
% Example: |\font\capsfont=cmcsc10 \caps{Tschichold}|
%
% \medbreak\noindent 
% The \LaTeX\ version is slightly more complicated. It uses a small list as a 
% `database' to hold sets of standard values for different
% fonts, shapes, etc., which are then selected automatically.
%
% New fonts may be added to this list using the \DescribeMacro{\capsdef}|\capsdef| command,
% which takes five arguments. The first argument describes the font with
% \emph{encoding, family, series, shape,} and \emph{size,} each optionally
% (e.\,g.~|OT1/cmr/m/n/10| for this very font, or only |/ppl///12| for all
% \emph{palatino} fonts at size 12\,pt). The \emph{size} entry may also contain
% a size range (\texttt{5-10}), where zero is assumed for an omitted lower
% boundary (\texttt{-10}) and a very, very big number for an omitted upper
% boundary (\texttt{5-}). The
% upper boundary is not included in the range, so, in the example below, all
% fonts with sizes greater or equal 5\,pt and smaller than 15\,pt are accepted 
% ($5\,\mbox{pt}\le size<15\,\mbox{pt}$).
% The second argument may contain font switching commands such as |\scshape|, 
% it may as well be empty or contain debugging commands (e.\,g.~|\message{*}|).
% The remaining three, non-optional arguments are the spaces as described above.
%
% \medskip\noindent
% Example: |\capsdef{T1/ppl/m/n/5-15}{\scshape}{.16em}{.4em}{.2em}|
%
% \medbreak\noindent
% The \LaTeX\ |\caps| command goes through the data list and takes the first
% matching set, so the order of definition is essential.
% There's only one default set for all font combinations predefined, 
% which can be overridden.
%
% \medskip
% The \DescribeMacro{\capsreset}|\capsreset| command deletes all font sets except the default set,
% which can be overridden with a |\capsdef| command using the
% default identifier |{////}|. This entry should be defined first, because
% it matches any font, so that no entry behind can ever be reached.
% The current |\caps| settings can be saved in a command sequence using the
% \DescribeMacro{\capssave}|\capssave| command. This allows to predefine different groups 
% of |\caps| sets.
%
% \medskip\noindent
% Example:
%\begin{verbatim}
%    \capsreset
%    \capsdef{/cmss///}{}{10pt}{20pt}{30pt}
%    ...
%    \capssave\widecaps
%    %---
%    \capsreset
%    \capsdef{/cmss///}{}{.1pt}{.2pt}{.3pt}
%    ...
%    \capssave\narrowcaps
%    %---
%    {\widecaps
%    \title{\caps{Yet Another Silly Example}}
%    } 
%\end{verbatim}
%
% \medbreak
% If you have defined a bunch of sets for different fonts and sizes,
% you may lose control over what fonts are used by the package. With the
% package option \DescribeOption{capsdefault}\textsf{capsdefault} selected, 
% |\caps| prints its argument underlined, if no set was specified for a
% particular font and the default set had to be used. 
%
%
%
%
%
% \subsection{Some examples}
%
% See also section \ref{sec:restrictions}.
%
%^^A=====================================================
% \begin{examples}
%
% \soultest{Ordinary text can be typed in as usual}
%   |\so{electrical industry}|
%   {\so{electrical industry}}
%
% \soultest{\texttt{\string\-} works as usual}  
%   |\so{man\-u\-script}|
%   {\so{man\-u\-script}}
%
% \soultest{Tokens that belong together have to be grouped, text inside  
%   groups is not spaced out. Grouped text must not contain hyphenation points}
%   |\so{le th{\'e}{\^a}tre}|
%   {\so{le th{\'e}{\^a}tre}}
%
% \soultest{To prevent material \emph{with} hyphenation points from being
%   spaced out, you have to put it in an \texttt{\string\hbox}
%   (\texttt{\string\mbox}) with two pairs of braces around it.
%   However, it's better to end \so{spacing out} before and 
%   restart it afterwards}
%   |\so{just an {\hbox{example}}}|
%   {\so{just an {\hbox{example}}}}
%  
% \soultest{Punctuation marks are spaced out, if they are
%   put into the group}
%   |\so{inside.} \&\ \so{outside}.|
%   {\so{inside.} \&\ \so{outside}.}
% 
% \soultest{Spaceout skips may be removed by typing \texttt{\string\<}.
% See also section \ref{sec:bugs}.
% It's, however, desirable to put the quotation marks out of
% the argument}
%   |\so{{``}\<Pennsylvania\<{''}}|
%   {\so{{``}\<Pennsylvania\<{''}}}
% 
% \soultest{Numbers should never be spaced out}  
%   |\so{1\<3 December {1995}}|
%   {\so{1\<3 December {1995}}}
%
% \soultest{\texttt{\string\slash}, \texttt{\string\hyphen},
%   \texttt{\string\endash}, and \texttt{\string\emdash} allow 
%   hyphenation before and after the break point}
%   |\so{input\slash output}|
%   {\so{input\slash output}}
%
% \soultest{\texttt{\string\hyphen} must not be used for leading hyphens}  
%   |\so{\dots and {\hbox{-}}jet}|
%   {\so{\dots and {\hbox{-}}jet}}
%
% \soultest{The \texttt{\string\~}-command inhibits line breaks.
%   A space \emph{\texttt{\char`\ }}$_{10}$ is mandatory here
%   to mark the word boundaries}
%   |\so{unbreakable~space}|
%   {\so{unbreakable~space}}
%
% \soultest{\texttt{\string\\} works as usual. Additional arguments
%   like \texttt{*} or vertical space are not accepted. Mind the space}
%   |\so{broken\\line}|
%   {\so{broken\\line}}
%  
% \soultest{The braces keep \TeX\ from discarding the space}
%   |\so{pretty awful\break test}|
%   {\so{pretty awful\break test}}
%
% \end{examples}
%^^A=====================================================
%
%
%
%
%
%
%
%
%
% \subsection{Typesetting Fraktur}
% \label{sec:fraktur}
%
% The old German fonts^^A
%^^A%%
%   \footnote{See the great old German fonts, which \caps{Yannis Haralambous} 
%   kindly provided, and the |oldgerm| and |yfonts| package as their \LaTeX\ interfaces.}
%^^A%%
% deserve some additional considerations. As stated above,
% the ligatures |ch|, |ck|, |sz|~(\ss), and~|tz| have to remain unbroken in spaced out
% \emph{Fraktur} text.  This may look strange at first glance, but you'll get used to it:
% 
% \medskip\noindent
% Example: |\textfrak{\so{S{ch}u{tz}vorri{ch}tung}}|
%
% \medbreak\noindent
% You already know that grouping keeps the |soul| mechanism from separating such ligatures.
% This is quite important for |s:|, |a*|, and~|"a|. As hyphenation is stronger than
% grouping, especially the |sz| may cause an error, if hyphenation happens to occur between
% the letters |s| and~|z|. (\TeX\ hyphenates the German word |auszer| wrongly like
% |aus-zer| instead of like |au-szer|, because the German hyphenation patterns
% do, for good reason, not see |sz| as `\ss'.) In such cases you can protect tokens with the 
% weird sequence e.\,g.~|{\mbox{sz}}| or a properly defined command. The |\ss| command,
% which is defined by the |yfonts| package, and similar commands will suffice as well.
% 
% Especially the `ygoth' font with its many ligatures is error-prone. You will
% have to assist the |soul| package in protecting or separating some of the ligatures
% as mentioned in section \ref{sec:restrictions}\slash number~6. This particular font,
% however, is probably too beautiful to get spaced out or underlined, anyway.
%
%
%
%
%
% 
% \subsection{Dirty tricks}
%
% Narrow columns are hard to set, because they don't allow much spacing
% flexibility, hence long words often cause overfull boxes. A macro---let us
% call it |\magstylepar|---could use |\so| to insert stretchability between the single
% characters. The following columns show some text typeset with such a funny
% definition at the left side and under \emph{plain} conditions at
% the right side, both with a width of~6\,pc.
%
% \def\sampletext{Some magazines and newspapers prefer this kind of spacing 
% because it reduces hyphenation problems to a minimum\<. Unfortunately\<, such 
% paragraphs aren't especially beautiful\<.}
%
% \def\plainsetup{\pretolerance100\tolerance200\hbadness1000
%   \linepenalty10\hyphenpenalty50\exhyphenpenalty50
%   \doublehyphendemerits10000\finalhyphendemerits5000\adjdemerits10000
%   \hfuzz.1pt\overfullrule5pt}
%
% \begin{quote}
% \batchmode     ^^A  we don't want to see all these overfull boxes...
% \leavevmode\hspace{0ptplus1fil}
% \hbox{\parindent0pt\plainsetup\let\<\relax
%   \vtop{\hsize6pc\expandafter\magstylepar\expandafter{\sampletext}}\hskip1em
%   \vtop{\hsize6pc\sampletext}\hss}
% \end{quote}
% \errorstopmode
%
% \noindent
% Such a macro could only set one paragraph at once, it would be subject
% to the same restrictions as mentioned in section
% \ref{sec:restrictions}, so it would really be a dirty trick rather than a
% glorious novelty \dots
%
%
%
%
%
%
%
%
%
% \section{\ul{Underlining}}
%
% The underlining macros are my answer to Prof.~\caps{Knuth}'s exercise 18.26 from his 
% \TeX{}book.~\texttt{:-)} All said about the macro |\ul| is also true of the
% striking out macro |\st|, which is in fact derived from the former. 
%
% \subsection{Settings}
% \DescribeMacro{\setul}
% The predefined \textit{underline depth} and \textit{thickness}
% work well with most fonts. They can be changed using the macro |\setul|.
%
% \medskip\noindent
% |\setul{|$\langle$\textit{underline depth}$\rangle$^^A
% |}{|$\langle$\textit{underline thickness}$\rangle$|}|
% 
% \medbreak\noindent
% Either dimension can be omitted, in which case there has to be
% an empty pair of braces.
% Both values should be defined in terms of |ex|, letting them 
% grow and shrink with the respective fonts.
% \DescribeMacro{\resetul}
% The |\resetul| command restores the standard values.
%
% \DescribeMacro{\setuldepth}
% Another way to set the \textit{underline depth} is to use the macro
% |\setuldepth|. It sets the depth such that the
% underline's upper edge lies 1\,pt beneath the given argument's
% deepest depth. If the argument is empty, all
% letters---i.\,e.\ all characters whose |\catcode| currently
% equals 11---are taken:
%
% \medskip\noindent
% Examples: |\setuldepth{ygp}|, |\setuldepth\strut|,
% |\setuldepth{}|
%
%
% \medskip\noindent
% \DescribeMacro{\setulcolor}
% The underlines are by default black. The color can be changed by
% using the |\setulcolor| command. It takes one argument that can be any
% of the color specifiers as described in the |color| package, which
% has to be loaded explicitly.
%
%\begin{verbatim}
%\documentclass{article}
%\usepackage{color,soul}
%\definecolor{darkblue}{rgb}{0,0,0.5}
%\setulcolor{darkblue}
%
%\begin{document}
%...
%\ul{Cave: remove all the underlines!}
%...
%\end{document}
%
%\end{verbatim}
%
%
%
%
%
% \subsection{Some examples}
%
% See also section \ref{sec:restrictions}.
%
%^^A=====================================================
% \begin{examples}
%
% \soultest{Ordinary text can be typed in as usual}
%   |\ul{electrical industry}|
%   {\ul{electrical industry}}
%  
% \soultest{\texttt{\string\-} works as usual}  
%   |\ul{man\-u\-script}|
%   {\ul{man\-u\-script}}
%  
% \soultest{Tokens that belong together have to be grouped.
%   Grouped text must not contain hyphenation points}  
%   |\ul{le th{\'e}{\^a}tre}|
%   {\ul{le th{\'e}{\^a}tre}}
%  
% \soultest{The \texttt{\string\~}-command inhibits line breaks.
%   A space \emph{\texttt{\char`\ }}$_{10}$ is mandatory here
%   to mark the word boundaries}
%   |\ul{unbreakable~space}|
%   {\ul{unbreakable~space}}
%  
% \soultest{The braces keep \TeX\ from discarding
%   the space}  
%   |\ul{pretty awful\break test}|
%   {\ul{pretty awful\break test}}
%
% \end{examples}
%^^A=====================================================
%
%
%
%
%
%
%
%
% \subsection{The \texttt{dvips} problem}
% \label{sec:dvips}
%
% \ul{Underlining} and \st{striking out} build up their lines with many
% short line segments. If you used the `dvips' program with
% default settings, you would get little gaps on some places, because
% the \textit{maxdrift} value allows the single objects to drift
% this many pixels from their real positions.
% \bigbreak
%
% \noindent
% There are two ways to avoid the problem, where the |soul| package
% chooses the second by default:
% \begin{enumerate}
% \item
%   Set the \textit{maxdrift} value to zero, e.\,g.: |dvips -e 0 file.dvi|.
%   (This is probably not a good idea, since the letters may then no longer be
%   spaced equally on low resolution printers.)
% \item
%   Use the \DescribeOption{overlap}\textsf{overlap} option. This option causes the single
%   line segments to overlap each other letting them stick out
%   0.5\,pt to the left and to the right. The option \DescribeOption{nooverlap}\textsf{nooverlap}
%   turns this overlapping off.
%
%   \DescribeMacro{\nooverlap}Use the commands |\nooverlap| and |\overlap|
%   for non-\LaTeX\ packages. \DescribeMacro{\overlap}Unlike the \LaTeX\
%   options these commands can also be used \emph{after} loading the package.
% \end{enumerate}
%
%
%
%
%
%
%
%
% \section{How the package works}
%
% \subsection{The kernel}
% \so{Letterspacing,} \ul{underlining}, and \st{striking out} use the same kernel
% mechanism. It typesets the given material in a 1\,sp wide |\vbox| which
% provides that every possible hyphenation point leads to a new line whithin
% this box. After the number of all lines (i.\,e.~syllables) is counted, and 
% the respective lengths are stored (pass one: \emph{analyzing}), the tokens are 
% scanned again, and their length is added to a register. Always if the length of the 
% next stored syllable is obtained (pass two: \emph{reconstruction}), the 
% required actions take place. These are controlled by the `interface'. 
%
%
%
%
%
%
%
%
% \subsection{The interface}
% \label{sec:interface}
% 
% The package uses six interface macros that are to be defined
% according to the required task.
% \vspace*{2ex}
%
% \newcommand*\tabline[3]{{\let\sloppy\relax\noindent
%   \parbox[t]{.3\hsize}{\noindent\strut\texttt{#1}}^^A%
%   \parbox[t]{.05\hsize}{\noindent\strut#2}^^A%
%   \parbox[t]{.65\hsize}{\noindent\strut#3\strut}}\smallskip}
%
%^^A page breaks between the header and the first two items are not desirable
% \noindent\parbox{\hsize}{^^A
% \tabline{\normalfont\textbf{macro name}}
%   {\textbf{\hidewidth mark\hidewidth}}
%   {\hfil\textbf{short description}}\\*[-8pt]
% \rule{\hsize}{.4pt}\par
% \tabline{\string\SOUL@preamble}{$P$}
%   {executed once at the beginning}
% \tabline{\string\SOUL@interword}{\texttt{\char`\ }}
%   {executed between every two words}
% }
% \tabline{\string\SOUL@everyhyphen}{$H$}    
%   {executed at every implicit hyphenation point; It may access the
%   letter kern in \texttt{\string\dimen@}, the hyphen kern in \texttt{\string\dimen3},
%   and the hyphen in \texttt{\string\box2}. This interface macro has
%   to reinsert the hyphen kern, it may remove a
%   character kern inserted by \texttt{\string\SOUL@everytoken}, if
%   necessary.}
% \tabline{\string\SOUL@everytoken}{$T$}
%   {executed after scanning a token; It may access the 
%   current token in \texttt{\string\SOUL@actual}, the next two tokens in
%   \texttt{\string\SOUL@prefetch} and \texttt{\string\SOUL@pprefetch}, where 
%   \texttt{\string\SOUL@next} points to the first of them, which doesn't
%   contain an \texttt{\string\empty} token. The
%   character kern is accessible via \texttt{\string\dimen@}. This
%   interface macro is responsible for reinserting the
%   character kern.}
% \tabline{\string\SOUL@everysyllable}{$S$}
%   {executed after scanning a whole syllable; not used by the
%   package definitions so far; If you want to access the whole syllable,
%   you have to let \texttt{\string\SOUL@everytoken} collect the tokens.}
% \noindent{\parbox{\hsize}{^^A
% \tabline{\string\SOUL@postamble}{$E$}
%   {executed once at the end}\\*[-4pt]
% \rule{\hsize}{.4pt}}}
%
%
%
%
% \vspace*{2.5ex}
%
% \goodbreak\noindent
% The above table's middle column shows a mark that indicates in the
% following examples, when the respective macros are executed:\nopagebreak
%
% \noindent
% \rule{\hsize}{.4pt}^^A
% \begin{labeling}{\hspace{.335\hsize}}
% \item[\normalfont\an{word}]
%   At the first execution of |\SOUL@everytoken| the token `|w|' is
%   stored in |\SOUL@actual| while the token `|o|' is already stored
%   in |\SOUL@prefetch|, and the token `|r|' in the macro
%   |\SOUL@pprefetch|. The preamble and postamble are executed
%   at the beginning\slash end.
% \item[\normalfont\an{one two}]
%   The macro |\SOUL@interword| is executed at every space.
% \item[\normalfont\an{example}\kern-1em]
%   The macro |\SOUL@everyhyphen| is executed at every possible
%   imcplicit hyphenation point.
% \item[\normalfont\an{beta-test}]
%   An explicit |\hyphen| belongs to the left syllable.
% \end{labeling}
% \rule[2ex]{\hsize}{.4pt}
%
%
%
% \noindent
% It's only natural that these examples, too,
% were automatically typeset by the |soul| package
% using a special interface:
%
%\begin{verbatim}
%    \DeclareRobustCommand*\an{%
%      \def\SOUL@preamble{$^{^P}$}%
%      \def\SOUL@everyspace##1{##1\texttt{\char`\ }}%
%      \def\SOUL@postamble{$^{^E}$}%
%      \def\SOUL@everyhyphen{$^{^H}$}%
%      \def\SOUL@everyexhyphen##1{##1$^{^ExH}$}%
%      \def\SOUL@everysyllable{$^{^S}$}%
%      \def\SOUL@everytoken{\SOUL@actual$^{^T}$}%
%      \SOUL@}
%\end{verbatim}
%
%
%
%
%
%
%
%
% \subsection{Doing it yourself}
%
% \subsubsection{Defining a new interface}
%
% Let's define an interface that allows to typeset text
% with a centered dot at every hyphenation point. The name of
% the macro shall be |\sy| (for \emph{syllables}).
% Since the |soul| mechanism is highly fragile, we use the \LaTeX\
% command |\DeclareRobustCommand|, so that the |\sy| macro
% can be used even in section headings etc.
%
%\begin{verbatim}
%    \DeclareRobustCommand*\sy{%
%\end{verbatim}
%
% \noindent
% We only set |\lefthyphenmin| and |\righthyphenmin| to zero
% at the beginning. All changes are restored automatically, 
% so there's nothing to do at the end.
%
%\begin{verbatim}
%    \def\SOUL@preamble{\lefthyphenmin=0 \righthyphenmin=0 }%
%    \let\SOUL@postamble=\relax
%\end{verbatim}
%
% \noindent
% We only want simple spaces. Note that they are not provided
% by default!
%
%\begin{verbatim}
%    \let\SOUL@interword=\space
%\end{verbatim}
%
% \noindent
% Output the current token and the character kern.
%\begin{verbatim}
%    \def\SOUL@everytoken{\SOUL@actual\kern\dimen@}%
%\end{verbatim}
%
% \noindent
% We would like to put a centered dot (|\cdot|) at every implicit
% hyphenation point except when the line is broken there, in which case
% there should be the hyphen character, anyway. The \TeX\ primitive |\discretionary|
% takes three arguments: 1.~pre-hyphen material 
% (|\box2| contains the current hyphen sign);
% 2.~post-hyphen material; 3.~no-hyphen material. The |\dimen@| kern that was
% inserted by the last |\SOUL@everytoken| command  has to be removed.
% |\dimen3| contains the hyphen kern, which is not used by the CM/EC
% fonts, but, for example, by the \emph{palatino} fonts. 
%
%\begin{verbatim}
%    \def\SOUL@everyhyphen{\kern-\dimen@\discretionary
%      {\kern\dimen3\unhcopy\tw@}{}%
%      {\hbox{\kern.5pt$\cdot$\kern.5pt}}}%
%\end{verbatim}
%
% \noindent
% There's nothing to do for |\SOUL@everysyllable|.
%\begin{verbatim}
%    \let\SOUL@everysyllable\relax
%\end{verbatim}
%
% \noindent
% Now that the interface is defined, we can start the mechanism.
%
%\begin{verbatim}
%    \SOUL@}
%\end{verbatim}
% 
% \hyphenation{al-go-rithm lin-guists ex-cel-lent} ^^A correct?
% \noindent
% \emph{\sy{This little macro will hardly be good enough
% for linguists, although it uses {\TeX's} excellent hyphenation algorithm,
% but it is at least a nice alternative to the}} |\showhyphens| \emph{\sy{command}.}
%
%
%
%
%
%
% 
% \subsubsection{Modifying an interface}
% 
% It's of course not necessary to reinvent the wheel. The following example uses
% the \ul{underlining} interface with a modified \st{striking out} preamble.\\
% Guess what it does \dots\hspace{\fill}\texttt{;-)}
% 
%\begin{verbatim}
%    \DeclareRobustCommand*\censor{%
%      \SOUL@ulbody
%      \def\SOUL@preamble{\setul{}{2.5ex}\SOUL@stpreamble}%
%      \SOUL@}
%\end{verbatim}
%
%
%
%
%
%
%
%
% \subsection{Common restrictions}
% \label{sec:restrictions}
%
% The |soul| mechanism is quite complicated, so you shouldn't be surprised
% that there are a couple of restrictions to bear in mind:
%
% \begin{enumerate}
% \item
%   |soul| arguments must not contain more than one paragraph. In other words,
%   they must not contain a |\par| (|\endgraf|) command, but that shouldn't really be
%   considered to be a restriction.
% \item
%   Fonts can \emph{not} be changed within a |soul| argument. Instead you have
%   to stop spacing out and underlining, etc., change the font, and then 
%   restart it. It's, however, better to avoid such cases at all.
% \item
%   The input text must not contain discretionary hyphens. Thus you have to
%   handle cases like the German word |Zu\discretionary{k-}{}{c}ker| by yourself.
% \item
%   The |soul| mechanism doesn't recognize |-|, |--|, and |---|. Instead, you
%   have to use the commands |\hyphen|, |\dash|, and |\emdash|, respectively.
%   The command |\slash| is internally redefined and works as usual.
% \item
%   The mechanism needs \texttt{\char`\ }$_{10}$ (a normal space with
%   |\catcode| 10) to separate words. Thus, you have to keep \TeX\ from
%   discarding spaces after commands, e.\,g.:
%   |\so{first line{\break}|\texttt{\char`\ }|second line}|
% \item
%   Ligatures are generally separated. Since the width of a ligature may
%   differ from the overall width of the concerned characters, these might
%   be displaced. Although the effect is hardly visible
%   with most fonts, you can iron it out, if you either force the characters
%   together using an |\mbox|, or separate them explicitly using a |\>|
%   in between.
% 
%   Some ligatures cause displacements though, which are not neglectable.
%   The `ygoth' font, for example, replaces `|a|' and `|e|' by a much narrower
%   `\texttt{\ae}' character. That's why you should either type |\so{{\mbox{ae}}ra\-risch}|,
%   or |\so{a\>era\-risch}|. Unfortunately, both versions disable automatical
%   hyphenation, so you have to give some hints.
%   (This particular problem doesn't encounter with fonts
%   where `\ae' is created by a command |\ae| rather than by an entry in the
%   \textit{ligtable}.)
% \item
%   Ambigous ligatures can cause troubles, which you can avoid by deciding whether you mean
%   |\so{ff\>f}| or |\so{f\>ff}|, but this is supposed to be a German problem only.
% \item
%   Commands that are based on the |soul| mechanism must not be nested. If you really
%   need such, put the inner stuff in a box, and use this box.
%\begin{verbatim}
%\newbox\anyboxname
%\sbox\anyboxname{ \so{the worst} }
%\ul{This is by far{{\usebox\anyboxname}}example!}
%\end{verbatim}
%   yields:\quad 
%   \newbox\anyboxname
%   \sbox\anyboxname{ \so{the worst} }
%   \ul{This is by far{{\usebox\anyboxname}}example!}
% \end{enumerate}
%
%
%
%
%
%
%
% \subsection{Known features (aka bugs)}^^A% my little joke 
% \label{sec:bugs}
%
% There's only one error message for the moment. It warns about
% failed reconstruction due to different length results in pass one
% (analyzing) and pass two (reconstruction).
%
% \medbreak\noindent
% Possible reasons are:\nopagebreak
% \begin{itemize}
% \item
%   \emph{You protected a hyphenation point only with braces:}
%   \emph{`input'} would normally be hyphenated \emph{`in-put'.} 
%   If you typed (for some mysterious reason) |\so{i{np}ut}|,
%   then pass one will see the hyphenation point and thus report two
%   syllables \emph{`in'} and \emph{`put'}, while pass two will desparately try
%   to reconstruct the length of \emph{`in'}  with a token `|i|' and a token `|np|'.
%   You can solve the problem by typing\\
%   \hspace*{2em} |\so{i{\mbox{np}}ut}|\\
%    or, of course,\\
%   \hspace*{2em} |\DeclareRobustCommand*\np{{\mbox{np}}}|\\
%   \hspace*{2em} |\so{i\np ut}|
% \item
%   \emph{You used \emph{\texttt{-}, \texttt{--},} or \emph{\texttt{---},} 
%   instead of the commands \emph{\texttt{\string\hyphen}, \texttt{\string\endash},} 
%   and \emph{\texttt{\string\emdash},} respectively.} 
% \item
%   \emph{You used the |inputenc| package and stated a compound character in a 
%   section heading, caption, etc.} The |inputenc| package allows to use e.\,g.\
%   `\texttt{\"a}' instead of `|\"a|' in an input file, and that's usually no problem
%   for |soul|. But if you use such a character in e.\,g.\ a section heading, that
%   character gets decomposed when it is written to the |.toc| file. If that
%   file is read in to typeset the table of contents, |soul| issues an error.
%   You can work around this cumbersome error by putting braces around that character, e.\,g.:
%   |\section{\so{Ger{|\texttt{\"a}|}t}}|
% \item
%   Quite unlikely: \emph{You forgot the funny \emph{\texttt{\string\|}} command at word boundaries:}   
%   Some fonts have built-in kerning with the \emph{boundary character}. The
%   EC-font's German opening quotes, for example, are followed by a certain kern,
%   except when a word begins after them. Here again, the two passes disagree on how to
%   hyphenate the argument. You can solve this
%   problem by putting a \texttt{\string\|} command after the quotes to remove the unwanted kern.\\
%   \hspace*{2em} |\so{noch ein {,,|\texttt{\string\|}|}dummes{``} Beispiel}|\\
%   This is a somewhat silly example, since you should have typed\\
%   \hspace*{2em} |\so{noch ein {,,}\<dummes\<{``} Beispiel}|,\\
%   anyway, in which case the \texttt{\string\|} would not have been necessary.
% \end{itemize}
%
% \noindent
% The |soul| mechanism recovers from these errors by
% simply omitting the rest of the current syllable. To make finding the responsible
% syllable easier, a black square like \mbox{\vrule height.8em depth.2em width1em} is 
% put right after it.
% 
% 
% 
%
%
%
%
%
% \begin{thebibliography}{0}
% \bibitem{Duden}{Duden, Volume 1. \textit{Die Rechtschreibung.} Bibliographisches Institut, 
%   Mannheim--Wien--Z\"urich, 1986, 19th~edition.}
%
% \bibitem{DEK}{\caps{Knuth, Donald Ervin}. \textit{The \TeX book.}
%   Addison--Wesley Publishing Company, Reading/Massachusetts, 1989, 16th~edition.}
%
% \bibitem{Muszynski}{\caps{Muszynski, Carl} and \caps{P{\v r}ihoda, Eduard}.
%   \textit{Die Terrainlehre in Ver\-bin\-dung mit der Darstellung, Beurtheilung und
%   Beschreibung des Terrains vom milit\"arischen
%   Standpunkte.}
%   L.\,W.~Seidel \&\ Sohn, Wien, 1872.}
%
% \bibitem{Reglement}{Normalverordnungsblatt f\"ur das k.\,u.\,k.~Heer.
%   \textit{Exercier-Reglement f\"ur die k.\,u.\,k.~Cavallerie, I. Theil.}
%   Wien, k.\,k.~Hof- und Staatsdruckerei, 1898, 4th~edition.}
%
% \bibitem{Tschichold}{\caps{Tschichold, Jan}. \textit{Ausgew\"ahlte Aufs\"atze \"uber Fragen
%   der Gestalt des Buches und der Typographie.} Birkh\"auser, Basel,
%   1987, 2nd~edition.}
%
% \bibitem{Willberg}{\caps{Willberg, Hans Peter} and \caps{Forssmann, Friedrich}.
%   \textit{Le\-se\-ty\-po\-gra\-phie.} H. Schmidt, Mainz, 1997.}
%
% \end{thebibliography}
% 
%
% \StopEventually{\addtocontents{toc}{\protect\end{multicols}}} 
%
%
%
%
%
%
%
% \section{The macros}
% ^^A max 72 columns
%
% \subsection{The package preamble}
%
% This piece of code makes sure that the package is only loaded 
% once. While this is guaranteed by \LaTeX, we have to do it
% manually for all other flavors of \TeX.
%
%    \begin{macrocode}
\expandafter\ifx\csname SOUL@\endcsname\relax\else
  \expandafter\endinput
\fi
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \noindent
% Because we need to know if we were loaded by \LaTeX\ on several
% places in the package, we define a handy \emph{if} switch.
%
%    \begin{macrocode}
\newif\if@SOUL@latex
\expandafter\ifx\csname documentclass\endcsname\relax
    \@SOUL@latexfalse
\else
    \@SOUL@latextrue
\fi
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \noindent
% |soul| tries to be a good \LaTeX\ citizen if used under \LaTeX\,
% else it has to fake some of its commands.
%
%    \begin{macrocode}
\if@SOUL@latex
    \NeedsTeXFormat{LaTeX2e}
    \ProvidesPackage{soul}
        [2001/99/99 v1.99 letterspacing/underlining  (mf)]
    \newfont\SOUL@tt{cmtt10}
\else
    \chardef\SOUL@atcode=\catcode`@
    \catcode`\@=11
    \def\DeclareRobustCommand*{\def}
    \def\providecommand*{\def}
    \def\DeclareOption#1#2{\expandafter\def\csname#1\endcsname{#2}}
    \def\PackageError#1#2#3{{%
        \newlinechar`^^J%
        \errorcontextlines\z@
        \edef\\{\errhelp{#3}}\\%
        \errmessage{Package #1 error: #2}%
    }}
    \def\@height{height}
    \def\@depth{depth}
    \def\@width{width}
    \def\@plus{plus}
    \def\@minus{minus}
    \let\SOUL@tt\tt
    \let\@xobeysp\space
\fi
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
% 
% \noindent
% Piles of |\newtoks| would be costly, so we try to get away with
% |\toksdef|. If the future shows that it was a bad decision, we
% can still switch. Local registers are always even, while global
% ones are odd. This is a \TeX\ convention.
%
%    \begin{macrocode}
\toksdef\SOUL@wordlist\z@
\toksdef\SOUL@lasttoken\tw@
\toksdef\SOUL@remainder=4
\toksdef\SOUL@replace=6
\toksdef\SOUL@syllable=8
\toksdef\SOUL@toklist\@ne
\toksdef\SOUL@buffer\thr@@
\toksdef\SOUL@token=5
\dimendef\SOUL@syllgoal\z@
\dimendef\SOUL@syllwidth\tw@
\dimendef\SOUL@charkern=4
\dimendef\SOUL@hyphkern=6
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The kernel}
%
% \begin{macro}{\SOUL@}
% This macro is the entry to the |soul| package. It should only be
% executed \emph{after} setting up a |soul| driver. |\count@| is the
% recursion counter for |\SOUL@scanwords|.
%
%    \begin{macrocode}
\def\SOUL@#1{{%
    \global\let\SOUL@errmsg\SOUL@error
    \let\<\relax
    \SOUL@wordlist={#1}%
    \leavevmode 
    \SOUL@preamble
    \count@\m@ne
    \SOUL@scanwords
    \SOUL@postamble
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@scanwords}
% The syllable analyzer can only deal with single words so we cut the
% input text into pieces. Every |\ifcase| branch cuts only one token
% or token sequence and replaces it by another token sequence. The
% line with the two |\break| seems unnecessary, but it isn't: The
% first argument of every |\SOUL@scan| command is only a literal
% delimiter, while the second is executable code. 
%
%    \begin{macrocode}
\def\SOUL@scanwords{{%
    \advance\count@\@ne
    \ifcase\count@
        \SOUL@scan{ }{\SOUL@everyspace{}}%
    \or \SOUL@scan{~}{\SOUL@everyspace{\nobreak}}%
    \or \SOUL@scan{\\}{\unskip\nobreak\hfil\break}%
    \or \SOUL@scan{\linebreak}{\linebreak}%
    \or \SOUL@scan{\break}{\break}%
    \or \SOUL@scan{---}{\SOUL@everyexhyphen{---}}%
    \or \SOUL@scan{--}{\SOUL@everyexhyphen{--}}%
    \or \SOUL@scan{-}{\SOUL@everyexhyphen{-}}%
    \or \SOUL@scan{\slash}{\SOUL@everyexhyphen{/}}%
    \or \SOUL@scani
    \or \SOUL@scanii
    \or \SOUL@scaniii
    \or
        \edef\x{\SOUL@toklist={\the\SOUL@wordlist}}%
        \x
        \SOUL@doword
    \fi    
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@scan}
% Prepares to replace every occurrence of argument |#1| by |#2|.
% |\SOUL@ignore| is inserted, because when checking for |---| in
% a string ``|a --|'' \TeX\ would otherwise recognise |---| and |--|
% instead of |--| and |---|. (The latter has to be added for the
% check to work with arguments that don't contain an em-dash at all.)
%
%    \begin{macrocode}
\def\SOUL@scan#1#2{%
    \def\split##1#1##2\SOUL@stop{%
        \SOUL@wordlist={##1}%
        \SOUL@remainder={##2}%
    }%
    \SOUL@replace={#2}%
    \edef\x{\SOUL@wordlist={%
        \the\SOUL@wordlist
        \noexpand\SOUL@ignore
        \noexpand#1%
    }}%
    \x
    \SOUL@dolist
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@dolist}
% Does the actual word splitting and re-enters |\SOUL@scanwords| for
% every piece to check for further word delimiters. The |\SOUL@ignore|
% macro is inserted to keep \TeX's argument scanner from discarding
% an argument's surrounding pair of braces. Because this is done
% in every recursion step, we finally end up with twelve |\SOUL@ignore|
% tokens (and further twelve that were inserted by |\SOUL@scanwords|).
%
%    \begin{macrocode}
\def\SOUL@dolist{%
    \expandafter\split\expandafter\SOUL@ignore
        \the\SOUL@wordlist\SOUL@stop
    \edef\x{\the\SOUL@wordlist}%
    \ifx\x\empty
        \let\SOUL@\relax
    \else
        \SOUL@scanwords
        \SOUL@wordlist=\SOUL@remainder
        \edef\x{\the\SOUL@wordlist}%
        \ifx\x\empty
            \let\SOUL@\relax
        \else
            \the\SOUL@replace
            \let\SOUL@\SOUL@dolist
        \fi
    \fi
    \SOUL@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@doword}
% The only way to find out, where a given word can be broken into
% syllables, is to let \TeX\ actually typeset the word under conditions
% that force every possible hyphenation. The result is a box with one
% line for every syllable.
%
%    \begin{macrocode}
\def\SOUL@doword{%
    \SOUL@buffer={}%
    \setbox\z@\vbox{%
        \SOUL@tt
        \hyphenchar\font`\-
        \hfuzz\maxdimen
        \hbadness\@M
        \pretolerance\m@ne
        \tolerance\@M
        \leftskip\z@
        \rightskip\z@
        \hsize1sp
        \everypar{}%
        \parfillskip\z@\@plus1fil
        \hyphenpenalty-\@M
        \noindent
        \hskip\z@
        \relax
        \the\SOUL@toklist}%
    \count@\m@ne
    \let\-\relax
    \SOUL@analyze
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \noindent
% We store the width of the hyphen character of the |cmtt10| font,
% because we need it in |\SOUL@doword|. (|cmtt10| is a fixed width
% font, so every other character would have worked, too.)
% 
%    \begin{macrocode}
\setbox\z@\hbox{\SOUL@tt-}
\newdimen\SOUL@ttwidth
\SOUL@ttwidth\wd\z@
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@analyze}
% This macro decomposes the box that |\SOUL@doword| has built.
% Because we have to start at the bottom, we put every 
% syllable onto the stack and execute ourselves recursively. If there
% are no syllables left, we return from the recursion and pick syllable
% after syllable from the stack again---this time from top to bottom---and
% hand the syllable width |\SOUL@syllgoal| over to |\SOUL@dosyllable|.
% All but the last syllable end with the hyphen character, whose
% width has to be subtracted.
%
%    \begin{macrocode}
\def\SOUL@analyze{{%
    \setbox\z@\vbox{%
        \unvcopy\z@
        \unskip
        \unpenalty
        \global\setbox\@ne=\lastbox}%
    \ifvoid\@ne
    \else
        \setbox\@ne\hbox{\unhbox\@ne}%
        \SOUL@syllgoal=\wd\@ne
        \advance\count@\@ne
        \SOUL@analyze
        \SOUL@syllwidth\z@
        \SOUL@syllable={}%
        \ifnum\count@>\z@
            \advance\SOUL@syllgoal-\SOUL@ttwidth
            \SOUL@dosyllable
            \SOUL@getkern{\the\SOUL@token}{\SOUL@hyphkern}%
                {\char\hyphenchar\font}%
            \SOUL@everyhyphen
        \else
            \SOUL@dosyllable
        \fi
    \fi
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@ignorem}
% \begin{macro}{\SOUL@ignore}
% \begin{macro}{\SOUL@stopm}
% \begin{macro}{\SOUL@stop}
% \begin{macro}{\SOUL@relaxm}
% \begin{macro}{\SOUL@lowerthanm}
% \begin{macro}{\SOUL@hyphenhintm}
% These macros are used as markers. To be able to check for such a
% marker with |\ifx| we have also to create a macro that contains
% the marker.
%
%    \begin{macrocode}
\def\SOUL@ignorem{\SOUL@ignore}
\let\SOUL@ignore\relax
\def\SOUL@stopm{\SOUL@stop}
\let\SOUL@stop\relax
\def\SOUL@relaxm{\relax}
\def\SOUL@lowerthanm{\<}
\def\SOUL@hyphenhintm{\-}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@dosyllable}
% 
%
%    \begin{macrocode}
\def\SOUL@dosyllable{%
    \SOUL@lasttoken=\SOUL@token
    \SOUL@gettoken
    \edef\x{\the\SOUL@token}%
    \ifx\x\SOUL@lowerthanm
        \SOUL@gettoken
        \edef\x{\the\SOUL@token}%
        \ifx\x\SOUL@stopm
            \let\SOUL@\SOUL@dosyllable
        \else
            \SOUL@getkern{\the\SOUL@lasttoken}{\SOUL@charkern}
                {\the\SOUL@token}%
            \SOUL@everylowerthan
            \SOUL@puttoken
            \let\SOUL@\SOUL@dosyllable
        \fi
    \else\ifx\x\SOUL@hyphenhintm
    \else\ifdim\SOUL@syllwidth=\SOUL@syllgoal
        \SOUL@everysyllable
        \SOUL@puttoken
        \let\SOUL@\relax
    \else
        \edef\x{\the\SOUL@token}%
        \ifx\x\SOUL@stopm
            \SOUL@errmsg
            \global\let\SOUL@errmsg\relax
            \let\SOUL@\relax
        \else
            \setbox\tw@\hbox{\SOUL@tt\the\SOUL@token}%
            \advance\SOUL@syllwidth\wd\tw@
            \SOUL@lasttoken=\SOUL@token
            \SOUL@gettoken
            \SOUL@getkern{\the\SOUL@lasttoken}{\SOUL@charkern}
                {\the\SOUL@token}%
            \SOUL@puttoken
            \SOUL@token=\SOUL@lasttoken
            \SOUL@everytoken
            \edef\x{\SOUL@syllable={\the\SOUL@syllable\the\SOUL@token}}%
            \x
            \let\SOUL@\SOUL@dosyllable
        \fi
    \fi\fi\fi
    \SOUL@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@gettoken{%
    \edef\x{\the\SOUL@buffer}%
    \ifx\x\empty
        \SOUL@nexttoken
    \else
        \global\SOUL@token=\SOUL@buffer
        \global\SOUL@buffer={}%
    \fi
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@puttoken{%
    \edef\x{\the\SOUL@buffer}%
    \ifx\x\empty
        \global\SOUL@buffer=\SOUL@token
        \global\SOUL@token={}%
    \else
        \SOUL@debug{puttoken called twice}%
    \fi
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@nexttoken{%
    \edef\x{\the\SOUL@toklist}%
    \ifx\x\empty
        \SOUL@token={\SOUL@stop}%
        \let\SOUL@\relax
    \else
        \expandafter\SOUL@splittoken\the\SOUL@toklist\SOUL@stop
        \edef\x{\the\SOUL@token}%
        \ifx\x\SOUL@ignorem
            \let\SOUL@\SOUL@nexttoken
        \else
            \let\SOUL@\relax
        \fi
    \fi
    \SOUL@
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@splittoken#1#2\SOUL@stop{%
    \global\SOUL@token={#1}%
    \global\SOUL@toklist={#2}%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@getkern#1#2#3{%
    \setbox4\hbox{#1#3}%
    #2\wd4
    \setbox4\hbox{#1\null#3}%
    \advance#2-\wd4
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@setkern#1{\ifdim#1=\z@\else\kern#1\fi}
\def\SOUL@removelastkern{\ifdim\lastkern=\z@\else\kern-\lastkern\fi}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\let\SOUL@scani\SOUL@scanwords
\let\SOUL@scanii\SOUL@scanwords
\let\SOUL@scaniii\SOUL@scanwords
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@debug#1{{[:#1:]}}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@error{%
    \vrule\@height.8em\@depth.2em\@width1em
    \PackageError{soul}{Reconstruction failed}{%
        I came across hyphenateable material enclosed in group
        braces,^^Jwhich I can't handle. Either drop the braces or
        make the material^^Junbreakable using an \string\mbox\space
        (\string\hbox). Note that a space^^Jalso counts as possible
        hyphenation point. See p.?? of the manual.^^JI'm leaving
        a black square so that you can see where I am right now.%
    }%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@setup{%
    \let\SOUL@preamble\relax
    \let\SOUL@postamble\relax
    \let\SOUL@everytoken\relax
    \let\SOUL@everysyllable\relax
    \def\SOUL@everyspace##1{##1\space}%
    \let\SOUL@everyhyphen\relax
    \let\SOUL@everyexhyphen\relax
    \let\SOUL@everylowerthan\relax
}
\SOUL@setup
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \so{letterspacing} driver}
%
%    \begin{macrocode}
\def\SOUL@sosetletterskip{\nobreak\hskip\SOUL@soletterskip}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@sopreamble{%
    \ifdim\lastskip>5sp
        \unskip
        \hskip\SOUL@soouterskip
    \fi
    \spaceskip\SOUL@soinnerskip
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@sopostamble{
    \unskip
    \global\skip@=\SOUL@soouterskip
    \aftergroup\SOUL@socheck
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@socheck{%
    \futurelet\SOUL@@\SOUL@sodoouter
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@sodoouter{%
    \bgroup
    \aftergroup\kern\aftergroup\z@
    \def\\{\let\\= }\\ %
    \def\~##1{\hskip\skip@\egroup}%
    \ifx\SOUL@@\\%
        \def\~ {\hskip\skip@\egroup}%
    \else
        \ifx\SOUL@@~%
        \def\~~{\nobreak\hskip\skip@\egroup}%
    \else\ifx\SOUL@@\ %
    \else\ifx\SOUL@@\space
    \else\ifx\SOUL@@\@xobeysp
    \else
        \let\~\egroup
    \fi\fi\fi\fi\fi
    \~%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@soeverytoken{%
    \the\SOUL@token
    \SOUL@gettoken
    \edef\x{\the\SOUL@token}%
    \ifx\x\SOUL@stopm
    \else
        \SOUL@setkern\SOUL@charkern
        \SOUL@sosetletterskip
    \fi
    \SOUL@puttoken
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@soeveryhyphen{%
    \discretionary{%
        \hbox{%
            \SOUL@removelastkern
            \SOUL@setkern\SOUL@hyphkern
            \char\hyphenchar\font
            \penalty\hyphenpenalty
        }%
    }{}{}%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@soeveryexhyphen#1{%
    \SOUL@sosetletterskip
    #1%
    \penalty\exhyphenpenalty
    \hskip\SOUL@soletterskip
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@soeverylowerthan{%
    \SOUL@removelastkern
    \unskip
    \SOUL@setkern\SOUL@charkern
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@sosetup{%
    \SOUL@setup
    \let\SOUL@preamble\SOUL@sopreamble
    \let\SOUL@postamble\SOUL@sopostamble
    \let\SOUL@everytoken\SOUL@soeverytoken
    \let\SOUL@everyhyphen\SOUL@soeveryhyphen
    \let\SOUL@everyexhyphen\SOUL@soeveryexhyphen
    \let\SOUL@everylowerthan\SOUL@soeverylowerthan
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@setso#1#2#3{%
    \def\SOUL@soletterskip{#1}%
    \def\SOUL@soinnerskip{#2}%
    \def\SOUL@soouterskip{#3}%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\sodef#1#2#3#4#5{%
    \DeclareRobustCommand*#1{\SOUL@sosetup
        \def\SOUL@preamble{%
            \SOUL@setso{#3}{#4}{#5}%
            #2%
            \SOUL@sopreamble
        }%
        \SOUL@
    }%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\resetso{%
    \sodef\so{}{.25em}{.65em\@plus.08em\@minus.06em}%
        {.55em\@plus.275em\@minus.183em}%
}
\resetso
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\sodef\sloppyword{%
    \linepenalty10
    \hyphenpenalty10
    \adjdemerits\z@
    \doublehyphendemerits\z@
    \finalhyphendemerits\z@
    \emergencystretch.1em}%
    {\z@\@plus.1em}%
    {.33em\@plus.11em\@minus.11em}%
    {.33em\@plus.11em\@minus.11em}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\if@SOUL@latex
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\DeclareRobustCommand\capsreset{%
    \let\SOUL@capsbase\empty
    \SOUL@capsdefault
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\capsdef#1#2#3#4#5{{%
    \toks\z@{\\{#1/#2/#3/#4/#5}}%
    \toks\tw@=\expandafter{\SOUL@capsbase}%
    \xdef\SOUL@capsbase{\the\toks\z@\the\toks\tw@}%
}}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\DeclareRobustCommand*\capssave[1]{%
    \expandafter\global\expandafter\let
        \csname SOUL@@\string#1\endcsname\SOUL@capsbase
    \def\SOUL@next##1{\DeclareRobustCommand*#1{\let\SOUL@capsbase##1}}%
    \expandafter\SOUL@next\expandafter{%
        \csname SOUL@@\string#1\endcsname}%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@capsfind#1/#2/#3/#4/#5/#6/#7/#8/#9/{%
    \let\SOUL@match=1%
    \SOUL@chk{#1}\f@encoding
    \SOUL@chk{#2}\f@family
    \SOUL@chk{#3}\f@series
    \SOUL@chk{#4}\f@shape
    \SOUL@dimchk{#5}\f@size
    \if\SOUL@match1%
        \let\\\@gobble
        \gdef\SOUL@caps{%
            \SOUL@sosetup
            \def\SOUL@preamble{\SOUL@setso{#7}{#8}{#9}#6%
                \SOUL@sopreamble}%
            \SOUL@}%
    \fi
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@chk#1#2{%
    \if$#1$%
    \else
        \def\~{#1}%
        \ifx#2\~\else\let\SOUL@match=0\fi
    \fi
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@dimchk#1#2{\if$#1$\else\SOUL@rangechk{#2}#1--\@ne\@@\fi}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@rangechk#1#2-#3-#4\@@{%
    \count@=#4%
    \ifnum\count@>\z@
        \ifdim#1\p@=#2\p@\else\let\SOUL@match=0\fi
    \else
        \dimen@=\if$#2$\z@\else#2\p@\fi
        \ifdim#1\p@<\dimen@\let\SOUL@match=0\fi
        \dimen@=\if$#3$\maxdimen\else#3\p@\fi
        \ifdim#1\p@<\dimen@\else\let\SOUL@match=0\fi
    \fi
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\DeclareRobustCommand*\caps{{%
    \def\\##1{\expandafter\SOUL@capsfind##1/}%
    \SOUL@capsbase
    \aftergroup\SOUL@caps
}}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@capsdefault{%
    \capsdef{////}%
    \SOUL@capsdfltfnt
    {.028em\@plus.005em\@minus.01em}%
    {.37em\@plus.1667em\@minus.1em}%
    {.37em\@plus.111em\@minus.14em}%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\let\SOUL@capsdfltfnt\scshape
\capsreset
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\else
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\let\capsfont\relax
\let\capsreset\relax
\def\capsdef#1#2#3#4#5{}
\def\capssave#1{}
\sodef\caps{\capsfont}
    {.028em\@plus.005em\@minus.01em}%
    {.37em\@plus.1667em\@minus.111em}%
    {.37em\@plus.1em\@minus.14em}
\fi
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \ul{underlining} driver}
%
%    \begin{macrocode}
\newdimen\SOUL@uldp
\newdimen\SOUL@ulht
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@ulleaders{%
    \leaders\hrule\@depth\SOUL@uldp\@height\SOUL@ulht
    \relax
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@ulunderline#1{{%
    \setbox\z@\hbox{#1}%
    \dimen@=\wd\z@
    \dimen@i=\SOUL@uloverlap
    \advance\dimen@\dimen@i
    \rlap{%
        \null\kern-.5\dimen@i
        \SOUL@ulcolor{\SOUL@ulleaders\hskip\dimen@}%
    }%
    \unhcopy\z@
}}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@ulpreamble{%
    \SOUL@uldp=\SOUL@uldepth
    \SOUL@ulht=-\SOUL@uldp
    \advance\SOUL@uldp\SOUL@ulthickness
    \spaceskip=\fontdimen\tw@\font\@plus\fontdimen\thr@@\font
        \@minus\fontdimen4\font
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@uleverysyllable{%
    \SOUL@ulunderline{%
        \the\SOUL@syllable
        \SOUL@setkern\SOUL@charkern
    }%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@uleveryspace#1{%
    \SOUL@ulcolor{%
        #1%
        \SOUL@ulleaders
        \hskip\spaceskip
    }%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@uleveryhyphen{%
    \discretionary{%
        \hbox{%
            \SOUL@removelastkern
            \SOUL@ulunderline{%
                \SOUL@setkern\SOUL@hyphkern
                \char\hyphenchar\font
            }%
        }%
    }{}{}%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@uleveryexhyphen#1{%
    \SOUL@ulunderline{#1}%
    \penalty\exhyphenpenalty
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\let\SOUL@ulcolor\relax
\def\setulcolor#1{%
    \def\SOUL@ulcolor{%
        \textcolor{#1}%
    }%
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\setuloverlap#1{%
    \def\SOUL@uloverlap{#1}%
}
\setuloverlap{.5pt}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@ulsetup{%
    \SOUL@setup
    \let\SOUL@preamble\SOUL@ulpreamble
    \let\SOUL@everysyllable\SOUL@uleverysyllable
    \let\SOUL@everyspace\SOUL@uleveryspace
    \let\SOUL@everyhyphen\SOUL@uleveryhyphen
    \let\SOUL@everyexhyphen\SOUL@uleveryexhyphen
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\DeclareRobustCommand*\ul{%
    \SOUL@ulsetup
    \SOUL@
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\setul#1#2{%
    \if$#1$\else\def\SOUL@uldepth{#1}\fi
    \if$#2$\else\def\SOUL@ulthickness{#2}\fi
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\resetul{\setul{.65ex}{.1ex}}
\resetul
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\setuldepth#1{{\def\SOUL@@{#1}%
    \setbox\z@\hbox{%
        \tracinglostchars\z@
        \ifx\SOUL@@\empty
            \count@\z@
            \loop
                \ifnum\catcode\count@=11\char\count@\fi
            \ifnum\count@<\@cclv
                \advance\count@\@ne
            \repeat
        \else
        #1%
        \fi
    }%
    \dimen@\dp\z@
    \advance\dimen@\p@
    \xdef\SOUL@uldepth{\the\dimen@}%
}}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \st{overstriking} driver}
%
%    \begin{macrocode}
\def\SOUL@stpreamble{%
    \dimen@\SOUL@ulthickness
    \dimen@i=-.5ex
    \advance\dimen@i-.5\dimen@
    \edef\SOUL@uldepth{\the\dimen@i}%
    \SOUL@ulpreamble
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\SOUL@stsetup{%
    \SOUL@ulsetup
    \let\SOUL@preamble\SOUL@stpreamble
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\DeclareRobustCommand*\st{%
    \SOUL@stsetup
    \SOUL@
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\DeclareRobustCommand*\hl{%
    \SOUL@stsetup
    \def\SOUL@preamble{%
        \setul{}{2.5ex}%
        \setulcolor{\SOUL@hlcolor}%
        \SOUL@stpreamble
    }%    
    \SOUL@
}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\def\sethlcolor#1{%
    \def\SOUL@hlcolor{#1}%
}
\sethlcolor{yellow}
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The package postamble}
%
%    \begin{macrocode}
\if@SOUL@latex
    \AtBeginDocument{%
        \expandafter\ifx\csname color\endcsname\relax
            \let\SOUL@color\relax
            \let\setulcolor\@gobble
            \let\sethlcolor\@gobble
            \let\hl\ul
        \fi    
    }
\DeclareOption{capsdefault}{%
    \AtBeginDocument{%
        \def\SOUL@capsdfltfnt#1{\SOUL@ulsetup\SOUL@ulpreamble}%
    }%
}
    \InputIfFileExists{soul.cfg}%
        {\PackageInfo{soul}{Local config file soul.cfg used}}{}
    \ProcessOptions
\else
    \def\setulcolor#1{}
    \let\sethlcolor\setulcolor
    \let\hl\ul
    \catcode`\@=\SOUL@atcode
\fi
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\endinput
%    \end{macrocode}
%
%
% \Finale
% 
%                                     
%                                                       ^^A.E.I.O.U.^^
