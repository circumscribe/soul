% \iffalse
%% File: soul.dtx  Copyright (C) 1998, 1999, 2001  Melchior FRANZ
%% $Id$
%
%<*batchfile>
%
%     (1)  run `soul.dtx' through LaTeX to get `soul.ins',
%          (if you don't already have it)
%
%     (2)  run `soul.ins' through (La)TeX to get
%          the package `soul.sty'
%
%          [or use `docstrip', and extract `soul.sty' from `soul.dtx'
%           using option `package']
%
%     (3)  now run `soul.dtx' three times through LaTeX
%          to get the documentation file `soul.dvi'
%
%
%
%
%% ====================================================================
%%  @LaTeX-package-file{
%%     author          = "Melchior FRANZ",
%%     version         = "2.0",
%%     date            = "99 999 2001",
%%     filename        = "soul.dtx",
%%     address         = "Melchior FRANZ
%%                        Rieder Hauptstrasse 52
%%                        A-5212 SCHNEEGATTERN
%%                        AUSTRIA",
%%     telephone       = "++43 7746 3109",
%%     URL             = "http://www.unet.univie.ac.at/~a8603365/",
%%     email           = "a8603365@unet.univie.ac.at",
%%     codetable       = "ISO/ASCII",
%%     keywords        = "spacing out, letterspacing, underlining, striking out",
%%     supported       = "yes",
%%     docstring       = "This article describes the `soul' package, which
%%                        provides hyphenateable letterspacing (spacing out),
%%                        underlining, and some derivatives.
%%                        All features are based upon a common mechanism 
%%                        that allows to typeset text syllable by syllable,
%%                        where the excellent TeX hyphenation algorithm is
%%                        used to find the proper hyphenation points.
%%                        Two examples show how to use the provided interface to
%%                        implement things such as `an-a-lyz-ing syl-la-bles'.
%%                        Although the package is optimized for LaTeX2e,
%%                        it works with Plain TeX and with other
%%                        packages, too.",
%%  }
%% ====================================================================
%
% COPYRIGHT NOTICE:
% This package is free software that can be redistributed and/or modified
% under the terms of the LaTeX Project Public License as specified
% in the file macros/latex/base/lppl.txt on any CTAN archive server.
%
%
%
%
%
\begin{filecontents}{soul.ins}
\def\batchfile{soul.ins}
\input docstrip.tex
\askforoverwritefalse
\keepsilent   % <-- this is for you, Christina   ;-)
\generate{\file{soul.sty}{\from{soul.dtx}{package}}}
\endbatchfile
\end{filecontents}
%</batchfile>
%
%
%
%
%
%<*driver>
\def\fileversion{2.0}
\def\filedate{2001/99/99}
%
%
%
%
%^^A  the `draft' option is needed for demonstration
\documentclass[draft]{ltxdoc}
%
%
\IfFileExists{soul.sty}{%
    \usepackage{soul}[2001/99/99]
    \let\SOULSTYfound\active
}{%
    \GenericWarning{soul.dtx}{%
        Package file `soul.sty' couldn't be found. You should however find^^J^^A
        a file `soul.ins' in the current directory. If you type "tex soul.ins"^^J^^A
        on the command line, `soul.sty' will be generated. After that
        run "latex soul.dtx" again and you won't see this message again.
    }%
}%
%
%
%
\ifx\SOULSTYfound\active

\IfFileExists{color.sty}{%
    \usepackage{color}
    \definecolor{darkblue}{rgb}{0,0,.7}
    \definecolor{lightblue}{rgb}{.90,.95,1}
    \setulcolor{darkblue}
    \sethlcolor{lightblue}
}{
    \AtBeginDocument{\let\hl\relax}
}  
\fi
%
%
%
%\RecordChanges
%
\begin{document}
\setcounter{tocdepth}{2}
\DocInput{soul.dtx}
\end{document}
%</driver>
% \fi
%
%
%
%
%
%
%
% \CheckSum{1814}
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \title{The \texttt{soul} package}
%
% \author{Melchior \caps{FRANZ}}
%
% \date{November ??, 2001}
%
%^^A=====================================================
%
%^^A  These slightly complicated macros allow to typeset the `example' sections
%^^A  conveniently. You'd better ignore them, since they are not thought to be
%^^A  good style...                                            ;-)
%
% \makeatletter
%
% \def\squarebull{\rule[.2ex]{.8ex}{.8ex}}
%
% \newenvironment{examples}
%   {\parindent\z@\small\fontencoding{OT1}\selectfont}
%   {\rule{\hsize}{.4pt}}
% 
% \def\soultest#1|{\bgroup\rule[.5ex]{\hsize}{.4pt}\par
%   \parbox[t]{.34\hsize}{\raggedright\textit{#1\unskip.}}%
%   \hspace{1.5em}$\vtop\bgroup\hb@xt@.4\hsize\bgroup
%   \llap{\squarebull\hspace{.4em}}\soulttest}
%
% {\catcode`\|=13\gdef\soulttest{%
%   \bgroup\def\do##1{\catcode`##1=12}\dospecials\ttfamily
%   \catcode`\|=13\unskip\def|{\hss\egroup\egroup\soultttest}}}
%
% \def\soultttest#1{\hbox{\vtop{\hsize.4\hsize\hbadness\@M
%   \leavevmode\llap{\squarebull\hspace{.4em}}#1}}%
%   \egroup$\hspace{1.5em}\parbox[t]{1mm}{\hyphenpenalty-\@M
%   \exhyphenpenalty-\@M\hbadness\@M\hfuzz\maxdimen
%   \strut\llap{\squarebull\hspace{.4em}}#1}%
%   \goodbreak\vspace{2ex}
%   \egroup}
%
% \newcommand*\DescribeOption[1]{\marginpar{\raggedleft\textsf{#1}\ignorespaces}}
%
%
%^^A  similar to the `description' environment
%
% \def\describemacro{^^A
%   \bgroup
%   \let\do\@makeother
%   \dospecials
%   \catcode`{=1
%   \catcode`}=2
%   \SOUL@@@descmacro
% }
%
% \def\SOUL@@@descmacro#1{^^A
%   \texttt{#1}^^A
%   \DescribeMacro{#1}^^A
%   \expandafter\edef\expandafter\x\expandafter{\expandafter\@gobble#1}^^A
%   \expandafter\label{cmd:\x}^^A
%   \egroup
% }
%
%
% \def\SOUL@@@verbitem[#1: {^^A
%   \bgroup
%   \let\do\@makeother
%   \dospecials
%   \SOUL@@@verbscan{#1}^^A
% }
%
% \def\SOUL@@@verbscan#1#2]{^^A
%   \egroup
%   \def\@currentlabel{\S\,\the\SOUL@@@itemnr}^^A 
%   \label{par:#1}^^A
%   \SOUL@@@item[\textbf{\@currentlabel\hskip.6em#1:}]\hfil\break
%   Example: \texttt{#2}\hfil\break^^A
%   \advance\SOUL@@@itemnr1
% }
% 
% \let\SOUL@@@item\item
% \newcount\SOUL@@@itemnr
%
% \newenvironment{verblist}[1]{^^A
%   \SOUL@@@itemnr=#1 
%   \list{}{^^A
%       \settowidth{\labelwidth}{\indent\indent}^^A
%       \leftmargin\labelwidth
%       \advance\leftmargin\labelsep
%       \def\makelabel##1{##1}^^A
%       \let\item\SOUL@@@verbitem
%   }^^A
% }{^^A
%   \endlist
% }
%
% \newenvironment{labeling}[1]{^^A
%   \list{}{^^A
%       \settowidth{\labelwidth}{\textbf{#1}}^^A
%       \leftmargin\labelwidth\advance\leftmargin\labelsep
%       \def\makelabel##1{\textbf{##1}\hfil}^^A
%   }^^A
% }{^^A
%   \endlist
% }
%
% \newenvironment{syntax}{^^A
%   \par\medskip\def\<##1>{$\langle$\textit{##1}$\rangle$}^^A
%       \indent\begin{tabular}{l}^^A
%   }{^^A
%       \end{tabular}^^A
%       \noindentafter\medbreak
%   }
%    
%
% \newenvironment{example}[1][.9\textwidth]
%   {\par\medskip\indent\begin{tabular}{p{#1}l}}
%   {\end{tabular}\noindentafter\medbreak}
%
% \newcommand*\noindentafter{^^A
%   \global\everypar{{\setbox\z@\lastbox}\everypar{}}}
%
% \newcommand*\errsquare{\leavevmode\vrule height.8em depth.2em width1em\relax}
%
%
% \ifx\SOULSTYfound\active
%^^A  analyze syllables--described somewhere below 
% 
% \DeclareRobustCommand*\sy{^^A
%   \def\SOUL@preamble{\lefthyphenmin0\righthyphenmin0}^^A
%   \def\SOUL@everyspace##1{##1\space}^^A
%   \let\SOUL@postamble\relax
%   \def\SOUL@everyhyphen{^^A
%       \unkern
%       \discretionary{^^A
%           \SOUL@setkern\SOUL@charkern
%           \char\hyphenchar\font
%       }{}{^^A
%           \hbox{\kern.5pt$\cdot$\kern.5pt}^^A
%      }^^A
%    }^^A
%    \let\SOUL@everysyllable\relax
%    \def\SOUL@everytoken{\the\SOUL@token\SOUL@setkern\SOUL@charkern}^^A
%    \SOUL@}
%
%^^A  analyze the interface---described somewhere below, too
%
% \DeclareRobustCommand*\an{^^A
%   \def\SOUL@preamble{$^{^P}$}^^A
%   \def\SOUL@everyspace##1{##1\texttt{\char`\ }}^^A
%   \def\SOUL@postamble{$^{^E}$}^^A
%   \def\SOUL@everyhyphen{$^{^h}$}^^A
%   \def\SOUL@everyexhyphen##1{##1$^{^H}$}^^A
%   \def\SOUL@everysyllable{$^{^S}$}^^A
%   \def\SOUL@everytoken{\the\SOUL@token$^{^T}$}^^A
%   \def\SOUL@everylowerthan{$^{^L}$}^^A
%   \SOUL@}
%
%^^A  magazine-like (truly awful) paragraphs
%^^A  (This macro was part of v1.0.  I took this out of the package,
%^^A  after I was warned, that one would not see any difference between
%^^A  M$-Wood and TeX documents in the future, after which I had sleepless nights...   ;-)
%^^A  If you know what you're doing, you can copy it to your personal `soul.cfg' file.
%
%  \DeclareRobustCommand*\magstylepar{\SOUL@sosetup
%    \def\SOUL@preamble{^^A
%      \edef\SOUL@soletterskip{\z@\@plus\fontdimen2\font\@minus\z@}^^A
%      \edef\SOUL@soinnerskip{\the\fontdimen2\font
%        \@plus\the\fontdimen3\font\@minus\the\fontdimen4\font}^^A
%      \let\SOUL@soouterskip\SOUL@soinnerskip
%      \SOUL@sopreamble}^^A
%    \lefthyphenmin2\righthyphenmin2\SOUL@}
%
%\else
%
%^^A  The package has not been found, so we're providing some dummies, just
%^^A  to avoid all these `Undefined command sequence' messages.
% 
%   \def\SOUL@X#1{\textbf{??}}%
%   \let\so\SOUL@X
%   \let\caps\SOUL@X
%   \let\ul\SOUL@X
%   \let\st\SOUL@X
%   \let\sy\SOUL@X
%   \let\an\SOUL@X
%   \let\magstylepar\SOUL@X
%   \def\sodef#1#2#3#4{\SOUL@X}%
% \fi
%
% \newcommand*\path{^^A
%   \bgroup
%   \let\do\@makeother
%   \dospecials
%   \catcode`\{=1
%   \catcode`\}=2
%   \def\{{\char"7B}^^A
%   \def\}{\char"7D}^^A
%   \SOUL@@@code
% }
%
% \newcommand*\SOUL@@@code[1]{\normalfont\texttt{#1}\egroup}
%
% \let\cs\path
% \let\option\textsf
% \def\package#1{{\normalfont\texttt{#1}}}
% \let\program\texttt
%
% \sodef\person{\scshape}{0.125em}{0.4583em}{0.5833em}
% \sodef\SOUL@@@versal{\upshape}{0.125em}{0.4583em}{0.5833em}
% \DeclareRobustCommand*\versal[1]{^^A
%   \MakeUppercase{\SOUL@@@versal{#1}}^^A
%   \SOUL@socheck} 
%
% \def\ConTeXt{Con\TeX t}
%
%
% \makeatother
%
%
%
%
%^^A=====================================================
%
%
% \changes{v1.0}{1998/10/16}{Initial version}%
%^^A  due to an error in the documentation of v1.0, there's no v1.1    :-(
% \changes{v1.1a}{1998/12/08}{fixed a bunch of bugs; `magstylepar command
%   banned; `caps introduced; `so and `caps recognize following spaces;
%   error message added; `so parameters are mandatory}
%
% \changes{v1.2}{1999/01/11}{fixed the newline bug; added the `\(>\) command}
%
% \changes{v1.3}{1999/05/15}{changed allowhyphen, preambles; added a paragraph
%   in the `features' section}
%
% \changes{v2.0}{????/??/??}{almost complete rewrite}
%
%
%
%
%
%
%
%
% \maketitle
%
%
%
% \begin{abstract}
% This article describes the \package{soul} package^^A
%^^A%%
%   \footnote{This file has version number \fileversion, last revised \filedate.},
%^^A%%
% which provides \so{hyphenateable letterspacing (spacing out),} \ul{underlining}
% and some derivatives such as \st{overstriking} and \hl{highlighting}.
% Although the package is optimized for \LaTeXe, it also works with
% Plain \TeX\ and with other flavors of \TeX\ like for instance \ConTeXt.
% By the way, the package name |soul|
% is only a combination of the two macro names \cs{\so} (\emph{space out})
% and \cs{\ul} (\emph{underline})---nothing poetic at all.^^A  :-( 
% \end{abstract}
%
%
%
%
%
% {\setlength\parskip{0pt}\tableofcontents }
% \addtocontents{toc}{\protect\begin{multicols}{2}}
%
%
%
%
%
%
% \section{Typesetting rules}
% 
% There are several possibilities to emphasize parts of a paragraph,
% where not all are considered good style. While underlining
% is commonly rejected, experts dispute about whether letterspacing
% should be used or not, and in which cases. If you are not interested
% in such debates, you may well skip to the next section.
% 
%
% \subsection*{Theory \dots}
% \label{sec:theory}
% 
% To understand the expert's arguments we have to know about the 
% conception of \emph{page greyness.} The sum of all characters on 
% a page represents a certain amount of greyness, provided that
% the letters are printed black onto white paper.
% 
% \person{Jan Tschichold} \cite{Tschichold}, a well known and recognized
% typographer, accepts only forms of emphasizing, which do not disturb this
% greyness. This is only true of italic shape, caps, and
% caps-and-small-caps fonts, but not of ordinary letterspacing, underlining,
% bold face type, and so on, all of which appear as either dark or light
% spots in the text area. In his opinion emphasized text shall not catch the eye when
% running over the text, but rather when actually reading the respective words.
% 
% Other, less restrictive typographers \cite{Willberg} call this kind of emphasizing
% `integrated' or `aesthetic', while they describe `active' emphasizing apart from it,
% which actually \emph{has} to catch the reader's eye. To the latter group belong commonly
% despised things like letterspacing, demibold face type and even underlined and colored text!
%
% On the other hand, \person{Tschichold} suggests
% to space out caps and caps-and-small-caps fonts on title pages, headings and running headers from
% 1\,pt up to 2\,pt.
% Even in running text legibility of uppercase letters should be improved with slight
% letterspacing, since (the Roman) majuscules don't look right, if they are spaced
% like (the Carolingian) minuscules.\footnote{This suggestion is followed throughout this article,
% although Prof.~\person{Knuth} already considered slight letterspacing with his |cmcsc| fonts.}
%
%
%
%\subsection*{\dots\ and Practice}
%
% However, in the last centuries letterspacing was excessively used,
% underlining at least sometimes, because the old \emph{Fraktur} fonts
% could not use capitals or italic shape for emphasizing. This tradition is wideley
% continued until today. Furthermore italic shape is not an option in many languages with
% non-latin glyphs. Letterspacing has a strong tradition in eastern countries
% where cyrillic fonts are used.
%
% The \person{Duden} \cite{Duden}, a well known German dictionary, describes how to space out properly:
% \emph{Punctuation marks are spaced out like letters, except quotation marks and periods.
% Numbers are never spaced out. The German syllable \mbox{\emph{-sche}} is not spaced
% out in cases like \emph{``der {\so{Virchow{sche}}} Versuch''}\footnote{the \person{Virchow} experiment}. 
% In the old German \emph{Fraktur} fonts the ligatures \emph{|ch|, |ck|, |sz|~(\ss),} and~\emph{|tz|} are
% not broken within spaced out text.}
%
% While some books follow all these rules \cite{Muszynski}, others don't
% \cite{Reglement}. (In fact, most books in my personal library do \emph{not} space out commas.)
%
%
%
%
%
% \section{Short introduction and common rules}
%
% The \package{soul} package provides five commands that are aimed at emphasizing
% text parts. Each of the commands takes one argument that can either be
% the text itself, or a macro that contains text (e.\,g. |\so\text|).
% See table \ref{tab:survey} for a complete command survey.
%
% {\catcode`\|=12
% \begin{center}    
% \begin{tabular}{r@{\hspace{1.5em}}l}
% ^^A\hline\\[-1ex]
% \verb+\so{letterspacing}+&\so{letterspacing}\\
% \verb+\caps{CAPITALS, Small Capitals}+&\caps{CAPITALS, Small Capitals}\\
% \verb+\ul{underlining}+&\ul{underlining}\\
% \verb+\st{overstriking}+&\st{overstriking}\\
% \verb+\hl{highlighting}+&\hl{highlighting}\\[1.5ex]^^A\hline
% \end{tabular}
% \end{center}
% }
%
% \noindent
% The |\hl| command does only highlight if the \package{color} package has
% been loaded, otherwise it falls back to underlining. The highlighting
% color is by default lightblue, underlines and overstriking lines are by
% default black. The colors can be changed using the following commands:
%
% {\catcode`\|=12
% \begin{center}    
% \begin{tabular}{r@{\hspace{1.5em}}l}
% ^^A\hline\\[-1ex]
% \verb+\setulcolor{red}+&set underlining color\\
% \verb+\setstcolor{green}+&set overstriking color\\
% \verb+\sethlcolor{blue}+&set highlighting color\\[1.5ex]^^A\hline
% \end{tabular}
% \end{center}
% }
%
% \noindent
% |\setulcolor{}| and |\setstcolor{}| (note the empty braces) turn
% coloring off. There are only few colors predefined by the \package{color}
% package, but you can easily add custom definitions.
% See the \package{color} package documentation\cite{color} for further
% information.
%
% \begin{example}
% |\usepackage{color,soul}|\\
% |\definecolor{orange}{rgb}{1,.5,0}|\\
% |\sethlcolor{orange}|\\
% |...|\\
% |\hl{this is highlighted in orange color}|\\
% \end{example}
%
%
%
%
%
%
%
% \bigskip ^^A why is this needed? bug in \LaTeX?
% \subsection[Some things work]{Some things work \dots}
%
% The following examples may look redundant, because they describe
% nothing else than common \LaTeX\ notation, but this is only the half story:
% The \package{soul} package has to pre-process the argument before it
% can split it into characters and syllables, and all described
% constructs are only allowed because the package actively provides them.
%
% \begin{verblist}{1}
% \item[Quotes: \so{``quotes''}]
%   The \package{soul} package recognizes the quotes ligatures |``|, |''| and |,,|. 
% \item[Accents: \so{na\"\i ve}]
%   Accents can be used naturally.
%   Support for the following accents is built-in: |\`|, |\'|, |\^|, |\"|, |\~|,
%   |\=|, |\.|, |\u|, |\v|, |\H|, |\t|, |\c|, |\d| and |\b|. Additionally,
%   if the \package{german} package is loaded you can also use the |"| command
%   and write |\so{na"ive}|. See \ref{sec:soulaccent} for how to add
%   further accents.
% \item[Mathematics: \so{foo$x^3$bar}]
%   Mathematic formulas are allowed, as long as they are
%   surrounded by \texttt\$. Note that the \LaTeX\ 
%   equivalent |\(...\)| does not work.
% \item[Hyphens and dashes: \so{re-sent}]
%   Explicit hyphens as well as en-dashes (|--|), em-dashes (|---|)
%   and the |\slash| command work as usual.
% \item[Newlines: \so{new\\line}]
%   The |\\| command fills the current line with white space
%   and starts a new line. Unlike the original \LaTeX\ command
%   \package{soul}'s version does not handle an optional parameter
%   like in |\\[1ex]|.
% \item[Unbreakable spaces: \so{don't~break}]
%   The |~| command sets an unbreakable space.
% \item[Breaking lines: \so{a\linebreak b}]
%   The |\linebreak| command also breaks the line without
%   filling it with white space at the end. |\break| can be
%   used as a synonym.
% \item[Grouping: \so{Virchow{sche}}]
%   A pair of braces can be used to let a group of characters
%   be seen as one item, so that \package{soul} does
%   for instance not space it out. The character must, however,
%   not contain a possible hyphenation point! (See \ref{par:Protecting})
% \item[Protecting: \so{a \mbox{little} b}]
%   An |\mbox| does also keep \package{soul} from
%   breaking up the contents, but it may even contain
%   hyphenation points. |\hbox| can be used as a synonym.
% \item[Font switching commands: \so{foo \texttt{bar}}]
%   All standard \LaTeX\ font switching commands are allowed, as
%   well as the \package{yfonts} package commands \cs{\textfrak} etc.\
%   Further commands have to be registered using the \cs{\soulfont}
%   command (see section \ref{sec:soulfont}).
% \item[Breaking up ligatures: \ul{f{}inally}]
%   Break up ligatures like `fi' in |\ul|, |\st| and |\hl|.
%   |\so| and |\caps| break up every unprotected (ungrouped/unboxed)
%   ligature, anyway, and would just add undesirable extra space around
%   braces.
% \end{verblist}
%
%
%
%
% \subsection{\dots\ others don't}
%
% Although the new \package{soul} is much more robust and forgiving than
% versions prior to 2.0 were, there are
% still some things that are not allowed in \package{soul} arguments.
% This is due its quite complex engine, which has to read and inspect every
% character before it can hand it over to \TeX's paragraph builder.
%
% \begin{verblist}{20}
% \item[Grouping hyphenateable material: \so{foo {little} bar}]
%   Grouped characters must not contain hyphenation points. Instead of
%   |\so{foo {little}}| write |\so{foo \mbox{little}}|. You get a
%   \texttt{`Reconstruction failed'} error and a black square like
%   \errsquare\ in the document where you violated this rule.
% \item[Discretionary hyphens: \so{Zu\discerctionary{k-}{}{c}ker}]
%   The input text must not contain discretionary hyphens. Thus you have to
%   handle cases like the German word |Zu\discretionary{k-}{}{c}ker| by yourself.
% \item[Nested soul commands: \ul{foo \so{bar} baz}]
%   \package{soul} commands must not be nested. If you really
%   need such, put the inner stuff in a box and use this box.\\
%   \null\qquad|\newbox\anyboxname|\\
%   \null\qquad|\sbox\anyboxname{ \so{the worst} }|\\
%   \null\qquad|\ul{This is by far\mbox{\usebox\anyboxname}example!}|\\
%   yields:\\ 
%   \newbox\anyboxname
%   \sbox\anyboxname{ \so{the worst} }
%   \null\qquad\ul{This is by far\mbox{\usebox\anyboxname}example!}
% \item[Conditional statements: \so{foo \iffalse bar\fi baz}]
%   \package{soul} arguments must not contain conditional statements like
%   |\if|, |\else|, |\fi|, |\ifcase|, etc.
% \item[Other weird stuff: \so{foo \verb|\bar| baz}]
%   They also must not contain \LaTeX\ environments, command definitions,
%   and tricky stuff like |\vadjust|. As long as you are writing simple, `horizontal'
%   material, you are on the safe side.
% \end{verblist}
%
% \noindent
% Note that with the exception of \ref{par:Grouping hyphenateable material}
% you may get error messages that do not indicate that you violated one of the
% above rules, but rather show some low-level problems that \TeX\ has detected.
% \texttt{`Incomplete }\cs{\ifcat}\texttt{'} in a line with a \package{soul}
% command is such a message.
%
%
%
% \begin{table}
% \begin{center}
% {\catcode`\|=12
% \newcommand*\pref[1]{{\footnotesize\pageref{cmd:#1}}}
% \newcommand*\Ast{\rlap{$^\ast$}}
% \let\m\cs
% \let\ti\textit
% \begin{tabular}{r@{\hspace{.6em}}c@{\hspace{.6em}}l}
% ^^A\hline\\[-1ex]
% &\hbox to0pt{\hss\footnotesize page\hss}&\\[.5ex]
% \verb+\so{letterspacing}+&                \pref{so}           &\so{letterspacing}\\
% \verb+\caps{CAPITALS, Small Capitals}+&   \pref{caps}         &\caps{CAPITALS, Small Capitals}\\
% \verb+\ul{underlining}+&                  \pref{ul}           &\ul{underlining}\\
% \verb+\st{striking out}+&                 \pref{st}           &\st{striking out}\\
% \verb+\hl{highlighting}+&                 \pref{hl}           &\hl{highlighting}\\
% \\
% \verb+\soulaccent{\cs}+&                  \pref{soulaccent}   &\ti{add accent} \cs{\cs} \ti{to accent list}\\
% \verb+\soulfont{\cs}+&                    \pref{soulfont}     &\ti{add font switching command} \m{\cs}\\
% \verb+\sloppyword{text}+&                 \pref{sloppyword}   &\ti{typset} \m{text} \ti{with stretchable spaces}\\
% \\
% \verb+\sodef\cs{1em}{2em}{3em}+&          \pref{sodef}        &\ti{define new spacing command} \m{\cs}\\
% \verb+\resetso+&                          \pref{resetso}      &\ti{reset} \m{\so} \ti{dimensions}\\
% \verb+\capsreset+\Ast&                    \pref{capsreset}    &\ti{clear caps data set}\\
% \verb+\capsdef{////}{1em}{2em}{3em}+\Ast& \pref{capsdef}      &\ti{define (default)} \m{\caps} \ti{data entry}\\
% \verb+\capssave\cs+\Ast&                  \pref{capssave}     &\ti{save} \m{\caps} \ti{data set under name} \rlap{\texttt{\string\cs}}\\
% \verb+\setul{1ex}{2ex}+&                  \pref{setul}        &\ti{set} \m{\ul} \ti{dimensions}\\
% \verb+\resetul+&                          \pref{resetul}      &\ti{reset} \m{\ul} \ti{dimensions}\\
% \verb+\setuldepth{y}+&                    \pref{setuldepth}   &\ti{set underline depth to depth of} \m{y}\\
% \verb+\setuloverlap{y}+&                  \pref{setuloverlap} &\ti{set underline overlap width to} \m{y}\\
% \verb+\setulcolor{y}+\Ast&                \pref{setulcolor}   &\ti{set underline color to} \m{y}\\
% \verb+\setstcolor{y}+\Ast&                \pref{setstcolor}   &\ti{set overstriking color to} \m{y}\\
% \verb+\sethlcolor{y}+\Ast&                \pref{sethlcolor}   &\ti{set highlighting color to} \m{y}\\^^A[1.5ex]\hline
% \end{tabular}}
% \caption{List of all available commands. The number points to the
%          page where the command is described. Those that are marked
%          with a little asterisk are only available when the package
%          is used together with \LaTeX.}
% \label{tab:survey}
% \end{center}
% \end{table}
%
%
%
%
%
%
%
%
%
%
%
% 
% \section{\so{Letterspacing}}
% 
% \subsection{How it works}
% \label{sec:somacros}
%
% The base macro for letterspacing is called \describemacro{\so}.
% It typesets the given argument with \emph{inter-letter space}
% between every two characters, \emph{inner space} between words
% and \emph{outer space} before and after the spaced out text.
% If we let ``$\cdot$'' stand for \emph{inter-letter space}, ``$\ast$''
% for \emph{inner spaces} and ``$\bullet$'' for \emph{outer
% spaces,} then the input on the left side of the follwing table
% will yield the schematic output on the right side:
%
% \begin{center}
% \def\.{$\cdot$}
% \def\-{\,$\ast$\,}
% \def\*{\,$\bullet$\,}
% \def\_{\texttt{\char"20}}
% \begin{tabular}{ccc}
% 1.& \verb*|XX \so{aaa bbb ccc} YY|&         XX\*a\.a\.a\-b\.b\.b\-c\.c\.c\*YY\\
% 2.& \verb*|XX\so{aaa bbb ccc}YY|&           XXa\.a\.a\-b\.b\.b\-c\.c\.cYY\\[1.5ex]
% 3.& \verb*|XX \null\so{aaa bbb ccc}{} YY|&  XX\_a\.a\.a\-b\.b\.b\-c\.c\.c\_YY\\
% 4.& \verb*|XX {\so{aaa bbb ccc}} YY|&       XX\*a\.a\.a\-b\.b\.b\-c\.c\.c\_YY\\
% \end{tabular}
% \end{center}
%
% Case~1 is what you'll need in most cases. The spaced out text is surrounded
% by spaces whose width lies between the width of a normal space and
% that of \emph{inner space}. Case~2 shows that only preceding and following
% spaces in the input really lead to \emph{outer space}, whereby the preceding
% space has to be more than |5sp| wide, because some \LaTeX\ macros use
% |\hskip1sp| as marker.
% Case~3 shows how to enforce normal spaces instead of \emph{outer spaces:}
% Preceding space can be hidden by any token or |\kern0pt|. Following space
% can also be hidden by any token, but note that a typical macro name
% like |\relax| would also hide the space after. |{}| is safe, though.
% The last case shows that braces around the \package{soul} statement
% don't hide the preceding space, but they do hide the following. This,
% however, is hardly what you desire if you put the statement in braces
% because it is part of a macro like |\newcommand*\soup[1]{{\upshape\so{#1}}}|.
% See section \ref{sec:markup} for a solution.
%
%
% The values are predefined for typesetting facsimiles mainly with
% \emph{Fraktur} fonts.
% You can define your own spacing
% macros or overwrite the original \cs{\so} meaning using the macro
% \describemacro{\sodef}:
%
% \begin{syntax}
% |\sodef|\<cmd>|{|\<font>|}{|\<inter-letter space>|}{|\<inner space>|}{|\<outer space>|}|
% \end{syntax}
%
% The space dimensions, all of which are mandatory, should be defined in terms of |em|
% letting them grow and shrink with the respective fonts.
%
% \begin{example}
% |\sodef\an{}{.2em}{1em plus1em}{2em plus.1em minus.1em}|
% \end{example}
%
% after which you can type `|\an{example}|' to get
% {\sodef\an{}{.2em}{1em plus1em}{2em plus.1em minus.1em}^^A
% `\an{example}'.}
% The \describemacro{\resetso} command resets \cs{\so}
% to the default values.
%
%
%
%
% \subsection{Some examples}
%
%^^A=====================================================
% \begin{examples}
%
% \soultest{Ordinary text}
%   |\so{electrical industry}|
%   {\so{electrical industry}}
%
% \soultest{Use \texttt{\string\-} to mark hyphenation points}  
%   |\so{man\-u\-script}|
%   {\so{man\-u\-script}}
%
% \soultest{Accents are recognized}
%   |\so{le th\'e\^atre}|
%   {\so{le th\'e\^atre}}
%
% \soultest{\texttt{\string\mbox} and \texttt{\string\hbox} protect material that
%   contains hyphenation points. The contents are treated as one, unbreakable entity}
%   |\so{just an \mbox{example}}|
%   {\so{just an \mbox{example}}}
%  
% \soultest{Punctuation marks are spaced out, if they are
%   put into the group}
%   |\so{inside.} \& \so{outside}.|
%   {\so{inside.} \& \so{outside}.}
% 
% \soultest{Spaceout skips may be removed by typing \texttt{\string\<}.
% It's, however, desirable to put the quotation marks out of
% the argument}
%   |\so{``\<Pennsylvania\<''}|
%   {\so{``\<Pennsylvania\<''}}
% 
% \soultest{Numbers should never be spaced out}
%   |\so{1\<3 December {1995}}|
%   {\so{1\<3 December {1995}}}
%
% \soultest{Explicit hyphens like |-|, |--| and |---| are recognized.
%   \texttt{\string\slash} outputs a slash with the possibility to break the line
%   afterwards}
%   |\so{input\slash output}|
%   {\so{input\slash output}}
%
% \soultest{To keep \TeX\ from breaking lines between the hyphen and `jet'
%   you have to protect the hyphen. This is no \package{soul} restriction
%   but normal \TeX\ behaviour}  
%   |\so{\dots and \mbox{-}jet}|
%   {\so{\dots and \mbox{-}jet}}
%
% \soultest{The \texttt{\~} command inhibits line breaks}
%   |\so{unbreakable~space}|
%   {\so{unbreakable~space}}
%
% \soultest{\texttt{\string\\} works as usual. Additional arguments
%   like \texttt{*} or vertical space are not accepted, though}
%   |\so{broken\\line}|
%   {\so{broken\\line}}
%  
% \soultest{\texttt{\string\break} breaks the line without filling it with white space}
%   |\so{pretty awful\break test}|
%   {\so{pretty awful\break test}}
%
% \end{examples}
%^^A=====================================================
%
%
%
%
%
%
%
%
%
%
%
% \subsection[Typesetting \caps{capitals-and-small-capitals}\\fonts]
%       {Typesetting capitals-and-small-capitals fonts}
%
% There is a special letterspacing command called \describemacro{\caps}.
% It differs from \cs{\so} in that it switches to caps-and-small-caps
% font shape, defines only slight spacing and can select spacing
% value sets from a database. This is a requirement for high-quality
% typesetting \cite{Tschichold}. The following lines show the effect
% of \cs{\caps} in comparison with the normal textfont and with
% small-capitals shape: 
%
% \def\sampletext{DONAUDAMPFSCHIFFAHRTSGESELLSCHAFT}
% \medskip\noindent
% \begin{tabular}{rl}
% |\normalfont|&\sampletext\\
% |\scshape|&{\scshape\sampletext}\\
% |\caps|&\null\expandafter\caps\expandafter{\sampletext}
% \end{tabular}
%
% \medbreak\noindent 
% The \LaTeX\ version is slightly more complicated. It uses a small list as a 
% `database' to hold sets of standard values for different
% fonts, shapes, etc., which are then selected automatically.
%
% New fonts may be added to this list using the \describemacro{\capsdef} command,
% which takes five arguments. The first argument describes the font with
% \emph{encoding, family, series, shape,} and \emph{size,} each optionally
% (e.\,g.~|OT1/cmr/m/n/10| for this very font, or only |/ppl///12| for all
% \emph{palatino} fonts at size 12\,pt). The \emph{size} entry may also contain
% a size range (\texttt{5-10}), where zero is assumed for an omitted lower
% boundary (\texttt{-10}) and a very, very big number for an omitted upper
% boundary (\texttt{5-}). The
% upper boundary is not included in the range, so, in the example below, all
% fonts with sizes greater or equal 5\,pt and smaller than 15\,pt are accepted 
% ($5\,\mbox{pt}\le size<15\,\mbox{pt}$).
% The second argument may contain font switching commands such as \cs{\scshape}, 
% it may as well be empty or contain debugging commands (e.\,g.~|\message{*}|).
% The remaining three, non-optional arguments are the spaces as described above.
%
% \begin{example}
% |\capsdef{T1/ppl/m/n/5-15}{\scshape}{.16em}{.4em}{.2em}|
% \end{example}
%
% The \LaTeX\ \cs{\caps} command goes through the data list and takes the first
% matching set, so the order of definition is essential.
% There's only one default set for all font combinations predefined, 
% which can be overridden.
%
% The \describemacro{\capsreset} command
% deletes all font sets except the default set,
% which can be overridden with a \cs{\capsdef} command using the
% default identifier |{////}|. This entry should be defined first, because
% it matches any font, so that no entry behind can ever be reached.
% The current \cs{\caps} settings can be saved in a command sequence using the
% \describemacro{\capssave} command. This allows to predefine different groups 
% of \cs{\caps} sets.
%
% \begin{example}
% |\capsreset|\\
% |\capsdef{/cmss///}{}{10pt}{20pt}{30pt}|\\
% |...|\\
% |\capssave\widecaps|\\
% \end{example}
%
% \indent
% \begin{example}
% |\capsreset|\\
% |\capsdef{/cmss///}{}{.1pt}{.2pt}{.3pt}|\\
% |...|\\
% |\capssave\narrowcaps|\\
% \end{example}
% 
% \indent
% \begin{example}
% |{\widecaps|\\
% |\title{\caps{Yet Another Silly Example}}|\\
% |}|\\
% \end{example}
%
% If you have defined a bunch of sets for different fonts and sizes,
% you may lose control over what fonts are used by the package. With the
% package option \DescribeOption{capsdefault}\textsf{capsdefault} selected, 
% \cs{\caps} prints its argument underlined, if no set was specified for a
% particular font and the default set had to be used. 
%
%
%
%
%
%
%
%
%
%
%
% \subsection{Typesetting Fraktur}
% \label{sec:fraktur}
%
% The old German fonts^^A
%^^A%%
%   \footnote{See the great old German fonts, which \caps{Yannis Haralambous} 
%   kindly provided, and the \package{oldgerm} and \package{yfonts} package
%   as their \LaTeX\ interfaces.}
%^^A%%
% deserve some additional considerations. As stated above,
% the ligatures |ch|, |ck|, |sz|~(\cs{\ss}), and~|tz| have to remain unbroken in spaced out
% \emph{Fraktur} text.  This may look strange at first glance, but you'll get used to it:
% 
% \begin{example}
% |\textfrak{\so{S{ch}u{tz}vorri{ch}tung}}|
% \end{example}
%
% You already know that grouping keeps the |soul| mechanism from separating such ligatures.
% This is quite important for |s:|, |a*|, and~|"a|. As hyphenation is stronger than
% grouping, especially the |sz| may cause an error, if hyphenation happens to occur between
% the letters |s| and~|z|. (\TeX\ hyphenates the German word |auszer| wrongly like
% |aus-zer| instead of like |au-szer|, because the German hyphenation patterns
% do, for good reason, not see |sz| as `\cs{\ss}'.) In such cases you can protect tokens with the 
% sequence e.\,g.~|\mbox{sz}| or a properly defined command. The \cs{\ss} command,
% which is defined by the \package{yfonts} package, and similar commands will suffice as well.
% 
% 
%
%
%
%
% 
% \subsection{Dirty tricks}
%
% Narrow columns are hard to set, because they don't allow much spacing
% flexibility, hence long words often cause overfull boxes. A macro---let us
% call it \cs{\magstylepar}---could use \cs{\so} to insert stretchability between the single
% characters. The following columns show some text typeset with such a funny
% definition at the left side and under \emph{plain} conditions at
% the right side, both with a width of~6\,pc.
%
% \def\sampletext{Some magazines and newspapers prefer this kind of spacing 
% because it reduces hyphenation problems to a minimum\<. Unfortunately\<, such 
% paragraphs aren't especially beautiful\<.}
%
% \def\plainsetup{\pretolerance100\tolerance200\hbadness1000
%   \linepenalty10\hyphenpenalty50\exhyphenpenalty50
%   \doublehyphendemerits10000\finalhyphendemerits5000\adjdemerits10000
%   \hfuzz.1pt\overfullrule5pt}
%
% \begin{quote}
% \batchmode     ^^A  we don't want to see all these overfull boxes...
% \leavevmode\hspace{0ptplus1fil}
% \hbox{\parindent0pt\plainsetup\let\<\relax
%   \vtop{\hsize6pc\magstylepar\sampletext}\hskip1em
%   \vtop{\hsize6pc\sampletext}\hss}
% \errorstopmode
% \end{quote}
%
%
%
%
%
%
%
%
%
%
% \section{\ul{Underlining}}
%
% The underlining macros are my answer to Prof.~\person{Knuth{\normalfont's}} exercise 18.26 from his 
% \TeX{}book.~\texttt{:-)} All said about the macro \describemacro{\ul} is also true of the
% striking out macro \describemacro{\st} and the highlighting macro \describemacro{\hl},
% both of which are in fact derived from the former.
%
% \subsection{Settings}
% The predefined \textit{underline depth} and \textit{thickness}
% work well with most fonts. They can be changed using the macro \describemacro{\setul}.
%
% \begin{syntax}
% |\setul{|\<underline depth>|}{|\<underline thickness>|}|
% \end{syntax}
% 
% Either dimension can be omitted, in which case there has to be
% an empty pair of braces.
% Both values should be defined in terms of |ex|, letting them 
% grow and shrink with the respective fonts.
% The \describemacro{\resetul} command restores the standard values.
%
% \describemacro{\setuldepth}
% Another way to set the \textit{underline depth} is to use the macro
% \cs{\setuldepth}. It sets the depth such that the
% underline's upper edge lies 1\,pt beneath the given argument's
% deepest depth. If the argument is empty, all
% letters---i.\,e.\ all characters whose \cs{\catcode} currently
% equals 11---are taken:
%
% \begin{example}
% |\setuldepth{ygp}|\\
% |\setuldepth\strut|\\
% |\setuldepth{}|\\
% \end{example}
%
% \describemacro{\setulcolor}
% The underlines are by default black. The color can be changed by
% using the \cs{\setulcolor} command. It takes one argument that can be any
% of the color specifiers as described in the |color| package, which
% has to be loaded explicitly.
%
% \indent
% \begin{example}
% |\documentclass{article}|\\
% |\usepackage{color,soul}|\\
% |\definecolor{darkblue}{rgb}{0,0,0.5}|\\
% |\setulcolor{darkblue}|\\
% \end{example}
% 
% \indent
% \begin{example}
% |\begin{document}|\\
% |...|\\
% |\ul{Cave: remove all the underlines!}|\\
% |...|\\
% |\end{document}|\\
% \end{example}
%
%
%
%
%
% \subsection{Some examples}
%
%^^A=====================================================
% \begin{examples}
%
% \soultest{Ordinary text}
%   |\ul{electrical industry}|
%   {\ul{electrical industry}}
%
% \soultest{Use \texttt{\string\-} to mark hyphenation points}  
%   |\ul{man\-u\-script}|
%   {\ul{man\-u\-script}}
%
% \soultest{Accents are recognized}
%   |\ul{le th\'e\^atre}|
%   {\ul{le th\'e\^atre}}
%
% \soultest{\texttt{\string\mbox} and \texttt{\string\hbox} protect material that
%   contains hyphenation points. The contents are treated as one, unbreakable entity}
%   |\ul{just an \mbox{example}}|
%   {\ul{just an \mbox{example}}}
%  
% \soultest{Explicit hyphens like |-|, |--| and |---| are recognized.
%   \texttt{\string\slash} outputs a slash with the possibility to break the line
%   afterwards}
%   |\ul{input\slash output}|
%   {\ul{input\slash output}}
%
% \soultest{To keep \TeX\ from breaking lines between the hyphen and `jet'
%   you have to protect the hyphen. This is no \package{soul} restriction
%   but normal \TeX\ behaviour}  
%   |\ul{\dots and \mbox{-}jet}|
%   {\ul{\dots and \mbox{-}jet}}
%
% \soultest{The \texttt{\~} command inhibits line breaks}
%   |\ul{unbreakable~space}|
%   {\ul{unbreakable~space}}
%
% \soultest{\texttt{\string\\} works as usual. Additional arguments
%   like \texttt{*} or vertical space are not accepted, though}
%   |\ul{broken\\line}|
%   {\ul{broken\\line}}
%  
% \soultest{\texttt{\string\break} breaks the line without filling it with white space}
%   |\ul{pretty awful\break test}|
%   {\ul{pretty awful\break test}}
%
% \end{examples}
%^^A=====================================================
%
%
%
%
%
%
%
%
% \subsection{The \program{dvips} problem}
% \label{sec:dvips}
%
% \ul{Underlining}, \st{striking out} and \hl{highlighting} build up
% their lines with many short line segments. If you used the `\program{dvips}'
% program with default settings, you would get little gaps on some places, because
% the \emph{maxdrift} value allows the single objects to drift
% this many pixels from their real positions.
% \bigbreak
%
% \noindent
% There are two ways to avoid the problem, where the \package{soul} package
% chooses the second by default:
% \begin{enumerate}
% \item
%   Set the \emph{maxdrift} value to zero, e.\,g.: |dvips -e 0 file.dvi|.
%   This is probably not a good idea, since the letters may then no longer be
%   spaced equally on low resolution printers.
% \item
%   Let the lines stick out by a certain amount on each side so that they
%   overlap. This overlap amount can be set using the \describemacro{\setuloverlap}.
%   It is set to 0.25\,pt by default. |\setuloverlap{0pt}| turns overlapping off.
% \end{enumerate}
%
%
%
%
%
%
%
%
% \section{Miscellaneous}
%
% \subsection{Using \package{soul} with other flavours of \TeX}
%
% The |soul| package has a \LaTeXe\ mode, which is selected if the |\documentclass|
% command can be found, and a \emph{plain} \TeX\ mode, which is selected otherwise. These
% modes differ in some points:
%
% In \emph{plain} \TeX\ mode the \cs{\caps} command is
% simply defined with \cs{\sodef}. It executes a command \cs{\capsfont} that 
%
% \begin{example}
% |\font\capsfont=cmcsc10|\\
% |\caps{Tschichold}|\\
% \end{example}
%
%
% This mode provides a package option \textsf{capsdefault} (see section \ref{sec:somacros}) and 
% two package options \textsf{nooverlap} and \textsf{overlap},
% where the latter is selected by default. These options deal with the way underlines
% are typeset. They are described in section \ref{sec:dvips}, but you'll hardly
% ever need to know about them. The \LaTeXe\ mode provides an intelligent |\caps| command
% and makes commands `robust' where it is desired. Furthermore, it tries to load
% a file `soul.cfg', where local stuff is to be placed in. (See the
% file `example.cfg', which implements a fairly complete |\caps| data base.)
%
%
% This mode implements the respective options as commands |\overlap| and |\nooverlap|,
% and provides a simplified |\caps| command. The `fragile' commands
% |\so|, |\caps|, |\ul|, and~|\st| are to be protected by the user, 
% if they are used in expanding environments such as |\write| arguments.
% 
%
%
%
%
%
% \subsection{Using \package{soul} commands in logical markup}
% \label{sec:markup}
%
% It's generally a bad idea to use font style commands like \cs{\textsc}
% in running text. There should always be some reasoning behind changing
% the style, such as ``names of persons shall be typeset in a caps-an-small-caps
% font''. Then you declare in your text just that some words are the name of a
% person, while you define in the preamble or even better in a separate
% style file how to deal with persons:
%
% \begin{example}
% |\newcommand*\person{\textsc}|\\
% |...|\\
% |``I think it's a beautiful day to go to the zoo and feed|\\
% |the ducks. To the lions.'' --~\person{Brian Kantor}|\\
% \end{example}
%
% It's quite simple to use \package{soul} commands that way:
%
% \begin{example}
% |\newcommand\comment*{\ul}             % or \let\comment=\ul|\\
% |\sodef\person{\scshape}{0.125em}{0.4583em}{0.5833em}|\\
% \end{example}
%
% A problem arises, though, if you want to use one of the
% letterspacing commands \cs{\so} and \cs{\caps} within another
% macro such that it can not look ahead, because there is
% e.\,g.\ a closing brace in the way. In this case you have
% to repeat the look-ahead macro \cs{\SOUL@socheck} as last
% command, so that it can check if the expression is followed
% by white space. Otherwise \package{soul} couldn't set the
% \emph{outer space} appropriately:
%
% \begin{example}
% |\DeclareRobustCommand*\versal[1]{%|\\
% |    \MakeUppercase{\SOUL@@@versal{#1}}%|\\
% |    \SOUL@socheck|\\
% |}|\\
% |\sodef\SOUL@@@versal{\upshape}{0.125em}{0.4583em}{0.5833em}|\\
% \end{example}
%
%
%
% \subsection{Typesetting long words in narrow columns}
%
% \describemacro{\sloppyword}
%
%
% \subsection{Using \package{soul} commands in section headings}
%
% \cite{titlesec}
%
% \begin{example}
% |\documentclass{article}|\\
% |\usepackage[latin1]{inputenc}|\\
% |\usepackage[T1]{fontenc}|\\
% |\usepackage{german,soul,titlesec}|
% \end{example}
% 
% \begin{example}
% |\newcommand*\periodafter[2]{#1{#2.}}|\\
% |\titleformat{\section}[display]|\\
% |    {\normalfont\centering}|\\
% |    {\S. \thesection.}|\\
% |    {2ex}|\\
% |    {\periodafter\caps}|
% \end{example}
%
% \begin{example}
% |\titleformat{\subsection}[block]|\\
% |    {\normalfont\centering\bfseries}|\\
% |    {\thesection.}|\\
% |    {.66em}|\\
% |    {\periodafter\so}|
% \end{example}
% 
% \begin{example}
% |\begin{document}|\\
% |\section{VON DEN MAASSEN UND MAASSST\"ABEN}|\\
% |\subsection{Das L\"angenmaass im Allgemeinen}|\\
% \\
% |Um L\"angen genau messen und vergleichen zu k\"onnen,|\\
% |bedarf es einer gewissen, bestimmten Einheit, mit der|\\
% |man untersucht, wie oft sie selbst, oder ihre Theile,|\\
% |in der zu bestimmenden L\"ange enthalten sind.|\\
% |...|\\
% |\end{document}|
% \end{example}
%
%
%
%
%
% \subsection{The configuration file}
% \label{sec:config}
%
% If you want to change the predefined settings or add new features,
% then create a file named `|soul.cfg|' and put it in a directory, where \TeX\
% can find it. This configuration file will then be loaded
% at the end of the |soul.sty| file, so you may redefine
% any settings or commands therein, select package options and even
% introduce new ones. But if you intend to give
% your documents to others, don't forget to give them the
% required configuration files, too! That's how such a file
% could look like:                                                                                                           
%
% \indent
% \begin{example}
% |% define macros for logical markup|\\
% |\sodef\person{\scshape}{0.125em}{0.4583em}{0.5833em}|\\
% \\
% |\sodef\SOUL@@@versal{\upshape}{0.125em}{0.4583em}{0.5833em}|\\
% |\DeclareRobustCommand*\versal[1]{%|\\
% |    \MakeUppercase{\SOUL@@@versal{#1}}%|\\
% |    \SOUL@socheck|\\
% |}|\\
% \end{example}
%
% \indent
% \begin{example}
% |% load the color package and set|\\
% |a different highlighting color|\\
% |\RequirePackage{color}|\\
% |\definecolor{lightblue}{rgb}{.90,.95,1}|\\
% |\sethlcolor{lightblue}|\\
% |\endinput|
% \end{example}
%
% You can safely use the |\SOUL@@@| namespace for internal macros---it
% won't be used by the \package{soul} package in the future.
%
%
%
%
%
%
%
%
%
%
%
%
% \section{How the package works}
%
% \subsection{The kernel}
% \so{Letterspacing,} \ul{underlining}, \st{striking out} and \hl{highlighting}
% use the same kernel mechanism. It splits the given argument into words and
% typesets each in a 1\,sp wide |\vbox|, so that \TeX\ is encouraged to
% break lines at every possible hyphenation point. After the number of all lines (i.\,e.~syllables) is counted, and 
% the respective lengths are stored (pass one: \emph{analyzing}), the tokens are 
% scanned again, and their length is added to a register. Always if the length of the 
% next stored syllable is obtained (pass two: \emph{reconstruction}), the 
% required actions take place. These are controlled by the `interface'. 
%
%
%
%
%
%
%
%
% \subsection{The interface}
% \label{sec:interface}
% 
% The package uses six interface macros that are to be defined
% according to the required task.
% \vspace*{2ex}
%
% \newcommand*\tabline[3]{{\let\sloppy\relax\noindent
%   \parbox[t]{.3\hsize}{\noindent\strut\texttt{#1}}^^A%
%   \parbox[t]{.05\hsize}{\noindent\strut#2}^^A%
%   \parbox[t]{.65\hsize}{\noindent\strut#3\strut}}\smallskip}
%
%^^A page breaks between the header and the first two items are not desirable
% \noindent\parbox{\hsize}{^^A
% \tabline{\normalfont\textbf{macro name}}
%   {\textbf{\hidewidth mark\hidewidth}}
%   {\hfil\textbf{short description}}\\*[-8pt]
% \rule{\hsize}{.4pt}\par
% \tabline{\string\SOUL@preamble}{$P$}
%   {executed once at the beginning}
% \tabline{\string\SOUL@everyspace}{\texttt{\char`\ }}
%   {executed between every two words}
% }
% \tabline{\string\SOUL@everyhyphen}{$H$}    
%   {executed at every implicit hyphenation point; It may access the
%   letter kern in \texttt{\string\dimen@}, the hyphen kern in \texttt{\string\dimen3},
%   and the hyphen in \texttt{\string\box2}. This interface macro has
%   to reinsert the hyphen kern, it may remove a
%   character kern inserted by \texttt{\string\SOUL@everytoken}, if
%   necessary.}
% \tabline{\string\SOUL@everytoken}{$T$}
%   {executed after scanning a token; It may access the 
%   current token in \texttt{\string\SOUL@actual}, the next two tokens in
%   \texttt{\string\SOUL@prefetch} and \texttt{\string\SOUL@pprefetch}, where 
%   \texttt{\string\SOUL@next} points to the first of them, which doesn't
%   contain an \texttt{\string\empty} token. The
%   character kern is accessible via \texttt{\string\dimen@}. This
%   interface macro is responsible for reinserting the
%   character kern.}
% \tabline{\string\SOUL@everysyllable}{$S$}
%   {executed after scanning a whole syllable; not used by the
%   package definitions so far; If you want to access the whole syllable,
%   you have to let \texttt{\string\SOUL@everytoken} collect the tokens.}
% \noindent{\parbox{\hsize}{^^A
% \tabline{\string\SOUL@postamble}{$E$}
%   {executed once at the end}\\*[-4pt]
% \rule{\hsize}{.4pt}}}
%
%
%
%
% \vspace*{2.5ex}
%
% \goodbreak\noindent
% The above table's middle column shows a mark that indicates in the
% following examples, when the respective macros are executed:\nopagebreak
%
% \noindent
% \rule{\hsize}{.4pt}^^A
% \begin{labeling}{\hspace{.335\hsize}}
% \item[\normalfont\an{word}]
%   At the first execution of |\SOUL@everytoken| the token `|w|' is
%   stored in |\SOUL@actual| while the token `|o|' is already stored
%   in |\SOUL@prefetch|, and the token `|r|' in the macro
%   |\SOUL@pprefetch|. The preamble and postamble are executed
%   at the beginning\slash end.
% \item[\normalfont\an{one two}]
%   The macro |\SOUL@interword| is executed at every space.
% \item[\normalfont\an{example}\kern-1em]
%   The macro |\SOUL@everyhyphen| is executed at every possible
%   imcplicit hyphenation point.
% \item[\normalfont\an{beta-test}]
%   An explicit |\hyphen| belongs to the left syllable.
% \end{labeling}
% \rule[2ex]{\hsize}{.4pt}
%
%
%
% \noindent
% It's only natural that these examples, too,
% were automatically typeset by the |soul| package
% using a special interface:
%
%\begin{verbatim}
%    \DeclareRobustCommand*\an{%
%      \def\SOUL@preamble{$^{^P}$}%
%      \def\SOUL@everyspace##1{##1\texttt{\char`\ }}%
%      \def\SOUL@postamble{$^{^E}$}%
%      \def\SOUL@everyhyphen{$^{^H}$}%
%      \def\SOUL@everyexhyphen##1{##1$^{^ExH}$}%
%      \def\SOUL@everysyllable{$^{^S}$}%
%      \def\SOUL@everytoken{\SOUL@actual$^{^T}$}%
%      \SOUL@}
%\end{verbatim}
%
%
%
%
%
%
%
%
% \subsection{Doing it yourself}
%
% \subsubsection{Defining a new interface}
%
% Let's define an interface that allows to typeset text
% with a centered dot at every hyphenation point. The name of
% the macro shall be |\sy| (for \emph{syllables}).
% Since the |soul| mechanism is highly fragile, we use the \LaTeX\
% command |\DeclareRobustCommand|, so that the |\sy| macro
% can be used even in section headings etc.
%
%\begin{verbatim}
%    \DeclareRobustCommand*\sy{%
%\end{verbatim}
%
% \noindent
% We only set |\lefthyphenmin| and |\righthyphenmin| to zero
% at the beginning. All changes are restored automatically, 
% so there's nothing to do at the end.
%
%\begin{verbatim}
%    \def\SOUL@preamble{\lefthyphenmin=0 \righthyphenmin=0 }%
%    \let\SOUL@postamble=\relax
%\end{verbatim}
%
% \noindent
% We only want simple spaces. Note that they are not provided
% by default!
%
%\begin{verbatim}
%    \let\SOUL@interword=\space
%\end{verbatim}
%
% \noindent
% Output the current token and the character kern.
%\begin{verbatim}
%    \def\SOUL@everytoken{\SOUL@actual\kern\dimen@}%
%\end{verbatim}
%
% \noindent
% We would like to put a centered dot (|\cdot|) at every implicit
% hyphenation point except when the line is broken there, in which case
% there should be the hyphen character, anyway. The \TeX\ primitive |\discretionary|
% takes three arguments: 1.~pre-hyphen material 
% (|\box2| contains the current hyphen sign);
% 2.~post-hyphen material; 3.~no-hyphen material. The |\dimen@| kern that was
% inserted by the last |\SOUL@everytoken| command  has to be removed.
% |\dimen3| contains the hyphen kern, which is not used by the CM/EC
% fonts, but, for example, by the \emph{palatino} fonts. 
%
%\begin{verbatim}
%    \def\SOUL@everyhyphen{\kern-\dimen@\discretionary
%      {\kern\dimen3\unhcopy\tw@}{}%
%      {\hbox{\kern.5pt$\cdot$\kern.5pt}}}%
%\end{verbatim}
%
% \noindent
% There's nothing to do for |\SOUL@everysyllable|.
%\begin{verbatim}
%    \let\SOUL@everysyllable\relax
%\end{verbatim}
%
% \noindent
% Now that the interface is defined, we can start the mechanism.
%
%\begin{verbatim}
%    \SOUL@}
%\end{verbatim}
% 
% \hyphenation{al-go-rithm lin-guists ex-cel-lent} ^^A correct?
% \noindent
% \emph{\sy{This little macro will hardly be good enough
% for linguists, although it uses {\TeX's} excellent hyphenation algorithm,
% but it is at least a nice alternative to the}} |\showhyphens| \emph{\sy{command}.}
%
%
%
%
%
%
% \section{Acknowledgements}
%
% A big thank you goes to \person{Stefan Ulrich} for his tips and bug reports
% during the development of versions 1.* and for his lessons on high quality
% typesetting. The \cs{\caps} mechanism was very much influenced by his
% suggestions. Thanks to \person{Alexander Shibakov}, who sent me a couple
% of bug reports and finally encouraged me to (almost) completely rewrite
% \package{soul}. His `nitpicking' made \package{soul} much less worse than
% it would have become otherwise. And finally thank you to \person{Frank Mittelbach},
% for never being satisfied with a particular development version.
%
%
%
%
%
% \begin{thebibliography}{0}
% \hbadness3000
% \bibitem{color}{\person{Carlisle, D. P.} \textit{The color package.} CTAN-Archive, 1997, v1.0d.}
%    
% \bibitem{Duden}{Duden, Volume 1. \textit{Die Rechtschreibung.} Bibliographisches Institut, 
%   Mannheim--Wien--Z\"urich, 1986, 19th~edition.}
%
% \bibitem{DEK}{\person{Knuth, Donald Ervin}. \textit{The \TeX book.}
%   Addison--Wesley Publishing Company, Reading/Massachusetts, 1989, 16th~edition.}
%
% \bibitem{Muszynski}{\person{Muszynski, Carl} and \person{P{\v r}ihoda, Eduard}.
%   \textit{Die Terrainlehre in Ver\-bin\-dung mit der Darstellung, Beurtheilung und
%   Beschreibung des Terrains vom milit\"arischen
%   Standpunkte.}
%   L.\,W.~Seidel \&\ Sohn, Wien, 1872.}
%
% \bibitem{Reglement}{Normalverordnungsblatt f\"ur das k.\,u.\,k.~Heer.
%   \textit{Exercier-Reglement f\"ur die k.\,u.\,k.~Cavallerie, I. Theil.}
%   Wien, k.\,k.~Hof- und Staatsdruckerei, 1898, 4th~edition.}
%
% \bibitem{titlesec}{\person{Bezos, Javier}. \textit{The titlesec and titletoc package.}
%   CTAN-Archive, 1999, v2.1.}
%    
% \bibitem{Tschichold}{\person{Tschichold, Jan}. \textit{Ausgew\"ahlte Aufs\"atze \"uber Fragen
%   der Gestalt des Buches und der Typographie.} Birkh\"auser, Basel,
%   1987, 2nd~edition.}
%
% \bibitem{Willberg}{\person{Willberg, Hans Peter} and \person{Forssmann, Friedrich}.
%   \textit{Le\-se\-ty\-po\-gra\-phie.} H. Schmidt, Mainz, 1997.}
%
% \end{thebibliography}
% 
%
% \StopEventually{\addtocontents{toc}{\protect\end{multicols}}} 
%
%
%
%
%
%
%
%
%^^A max 72 columns
%^^A--------------------------------------------------------------------
%
%
%
%
% \section{The implementation}
%
% \subsection{The package preamble}
%
% This piece of code makes sure that the package is only loaded 
% once. While this is guaranteed by \LaTeX, we have to do it
% manually for all other flavors of \TeX.
%
%    \begin{macrocode}
\expandafter\ifx\csname SOUL@\endcsname\relax\else
  \expandafter\endinput
\fi
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \noindent
% Fake some of the \LaTeX\ commands if we were loaded by another flavor
% of \TeX.
%
%    \begin{macrocode}
\expandafter\ifx\csname documentclass\endcsname\relax
    \chardef\atcode=\catcode`@
    \catcode`\@=11
    \def\DeclareRobustCommand*{\def}
    \def\DeclareOption#1#2{\expandafter\def\csname#1\endcsname{#2}}
    \def\PackageError#1#2#3{{%
        \newlinechar`^^J%
        \errorcontextlines\z@
        \edef\\{\errhelp{#3}}\\%
        \errmessage{Package #1 error: #2}%
    }}
    \def\@height{height}
    \def\@depth{depth}
    \def\@width{width}
    \def\@plus{plus}
    \def\@minus{minus}
    \font\SOUL@tt=cmtt10
    \let\@xobeysp\space
    \let\linebreak\break
    \let\mbox\hbox
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \noindent
% |soul| tries to be a good \LaTeX\ citizen if used under \LaTeX\ and
% declares itself properly. Most command sequences in the package
% are protected by the |SOUL@| namespace, all other macros are first
% defined to be empty. This will give us an error message if one of
% were already defined by a previously loaded package.
%
%    \begin{macrocode}
\else
    \NeedsTeXFormat{LaTeX2e}
    \ProvidesPackage{soul}
        [2001/99/99 v2.0 letterspacing/underlining  (mf)]
    \newfont\SOUL@tt{cmtt10}
    \newcommand*\sodef{}
    \newcommand*\resetso{}
    \newcommand*\textso{}
    \newcommand*\sloppyword{}
    \newcommand*\capsreset{}
    \newcommand*\capsdef{}
    \newcommand*\capssave{}
    \newcommand*\textcaps{}
    \newcommand*\capsfont{}
    \newcommand*\setulcolor{}
    \newcommand*\setuloverlap{}
    \newcommand*\textul{}
    \newcommand*\setul{}
    \newcommand*\resetul{}
    \newcommand*\setuldepth{}
    \newcommand*\textst{}
    \newcommand*\setstcolor{}
    \newcommand*\texthl{}
    \newcommand*\sethlcolor{}
    \newcommand*\so{}
    \newcommand*\ul{}
    \newcommand*\st{}
    \newcommand*\hl{}
    \newcommand*\caps{}
    \newcommand*\soulaccent{}
    \newcommand*\soulfont{}
\fi
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \noindent
% Piles of \cs{\newtoks} and \cs{\newdimen} would be costly, so we try to get
% away with their \cs{\...def} counterparts. If the future shows that it was
% a bad decision, this can still be changed. Local registers are always even,
% while global ones are odd. This is a \TeX\ convention.
%
%    \begin{macrocode}
\toksdef\SOUL@word\z@
\toksdef\SOUL@lasttoken\tw@
\toksdef\SOUL@syllable=4
\toksdef\SOUL@temp=6
\toksdef\SOUL@cmds=8
\toksdef\SOUL@buffer\@ne
\toksdef\SOUL@token\thr@@
\dimendef\SOUL@syllgoal\z@
\dimendef\SOUL@syllwidth\tw@
\dimendef\SOUL@charkern=4
\dimendef\SOUL@hyphkern=6
\countdef\SOUL@minus\z@
\countdef\SOUL@comma\tw@
\countdef\SOUL@apo=4
\countdef\SOUL@grave=6
\countdef\SOUL@level=8
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@ignorem}
% \begin{macro}{\SOUL@ignore}
% \begin{macro}{\SOUL@stopm}
% \begin{macro}{\SOUL@stop}
% \begin{macro}{\SOUL@relaxm}
% \begin{macro}{\SOUL@lowerthanm}
% \begin{macro}{\SOUL@hyphenhintm}
% These macros are used as markers. To be able to check for such a
% marker with \cs{\ifx} we have also to create a macro that contains
% the marker. \cs{\SOUL@spc} shall contain a normal space with a
% \cs{\catcode} of~10.
%
%    \begin{macrocode}
\def\SOUL@stopM{\SOUL@stop}
\let\SOUL@stop\relax
\def\SOUL@lowerthan{}
\def\SOUL@lowerthanM{\<}
\def\SOUL@hyphenhintM{\-}
\def\SOUL@n*{\let\SOUL@spc= }\SOUL@n* %
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The kernel}
%
% \begin{macro}{\SOUL@}
% This macro is the entry to the \package{soul} package. It does only make
% sense if it was called after up a \package{soul} driver. \cs{\SOUL@@}
% will swallow the first token after a \package{soul} command. This is
% either an opening brace or the name of a macro that contains text.
%
%    \begin{macrocode}
\def\SOUL@{%
    \afterassignment\SOUL@expand
    \let\SOUL@@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@expand}
% If the first token after the \package{soul} command was an opening
% brace we set up some things and start scanning. The \cs{\bgroup} will
% be closed in the \cs{\egroup} branch of \cs{\SOUL@eval}. Otherwise,
% if the first token was a macro name, then we expand that macro and
% call \cs{\SOUL@} with its contents again. Unfortunately, we have to
% exclude some macrs therein from expansion.
%
%    \begin{macrocode}
\def\SOUL@expand{%
    \ifcat\bgroup\noexpand\SOUL@@
        \bgroup
        \let\<\SOUL@lowerthan
        \leavevmode
        \SOUL@preamble
        \SOUL@word={}%
        \SOUL@minus\z@
        \SOUL@comma\z@
        \SOUL@apo\z@
        \SOUL@grave\z@
        \SOUL@level\z@
        \let\SOUL@n\SOUL@scan
    \else
        \bgroup
            \def~{\noexpand~}%
            \def\,{\noexpand\,}%
            \def\S{\noexpand\S}%
            \xdef\SOUL@x{\SOUL@@}%
        \egroup%
        \def\SOUL@n{\expandafter\SOUL@\expandafter{\SOUL@x}}%
    \fi
    \SOUL@n
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The scanner}
%
% \begin{macro}{\SOUL@scan}
% This is the entry point for the scanner. It calls \cs{\SOUL@eval}
% and will in turn be called by \cs{\SOUL@eval} again whenever a
% new token should be read in.
%
%    \begin{macrocode}
\def\SOUL@scan{%
    \futurelet\SOUL@@\SOUL@eval
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@eval}
% And here it is: the scanner's heart. It cares for quotes and dashes
% ligatures and handles all commands that must not be fed to the
% analyzer. Note the \cs{\egroup} branch. It makes \cs{\egroup}s of
% font switching commands transparent and quits the scanner else.
%
%    \begin{macrocode}
\def\SOUL@eval{%
    \def\SOUL@n*##1{\SOUL@scan}%
    \ifnum\SOUL@minus=\thr@@
        \SOUL@doword
        \SOUL@everyexhyphen{---}%
        \SOUL@minus\z@
    \else\ifnum\SOUL@comma=\tw@
        \edef\x{\SOUL@word={\the\SOUL@word{{,,}}}}\x
        \SOUL@comma\z@
    \else\ifnum\SOUL@apo=\tw@
        \edef\x{\SOUL@word={\the\SOUL@word{{''}}}}\x
        \SOUL@apo\z@
    \else\ifnum\SOUL@grave=\tw@
        \edef\x{\SOUL@word={\the\SOUL@word{{``}}}}\x
        \SOUL@grave\z@
    \fi\fi\fi\fi
    \ifx\SOUL@@-%
        \advance\SOUL@minus\@ne
    \else\ifx\SOUL@@,%
        \advance\SOUL@comma\@ne
    \else\ifx\SOUL@@'%
        \advance\SOUL@apo\@ne
    \else\ifx\SOUL@@`%
        \advance\SOUL@grave\@ne
    \else
        \ifnum\SOUL@minus=\tw@
            \SOUL@doword
            \SOUL@everyexhyphen{--}%
            \SOUL@minus\z@
        \else\ifnum\SOUL@minus=\@ne
            \SOUL@doword
            \SOUL@everyexhyphen{-}%
            \SOUL@minus\z@
        \else\ifnum\SOUL@comma=\@ne
            \edef\x{\SOUL@word={\the\SOUL@word,}}\x
            \SOUL@comma\z@
        \else\ifnum\SOUL@apo=\@ne
            \edef\x{\SOUL@word={\the\SOUL@word'}}\x
            \SOUL@apo\z@
        \else\ifnum\SOUL@grave=\@ne
            \edef\x{\SOUL@word={\the\SOUL@word`}}\x
            \SOUL@grave\z@
        \fi\fi\fi\fi\fi
        \ifcat\egroup\noexpand\SOUL@@
            \SOUL@doword
            \ifnum\SOUL@level>\z@
                \egroup
                \def\SOUL@n*{\afterassignment\SOUL@scan\let\SOUL@}%
            \else
                \def\SOUL@n*{\SOUL@postamble}%
            \fi
        \else\ifx\SOUL@@\par
            \def\SOUL@n*\par{\par\leavevmode\SOUL@scan}%
        \else\if\noexpand\SOUL@@\SOUL@spc
            \SOUL@doword
            \SOUL@everyspace{}%
            \def\SOUL@n* {\SOUL@scan}%
        \else\ifx\SOUL@@\\%
            \SOUL@doword
            \unskip\nobreak\hfil\break
        \else\ifx\SOUL@@~%
            \SOUL@doword
            \SOUL@everyspace{\nobreak}%
        \else\ifx\SOUL@@\slash
            \SOUL@doword
            \SOUL@everyexhyphen{/}%
        \else\ifx\SOUL@@\mbox
            \def\SOUL@n*{\SOUL@addprotect}%
        \else\ifx\SOUL@@\hbox
            \def\SOUL@n*{\SOUL@addprotect}%
        \else\ifx\SOUL@@\break
            \SOUL@doword
            \break
        \else\ifx\SOUL@@\linebreak
            \SOUL@doword
            \SOUL@everyspace{\linebreak}%
        \else\ifcat\bgroup\noexpand\SOUL@@
            \def\SOUL@n*{\SOUL@addgroup{}}%
        \else\ifcat$\noexpand\SOUL@@
            \def\SOUL@n*{\SOUL@addmath}%
        \else
            \def\SOUL@n*{\SOUL@dotoken}%
        \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi
    \fi\fi\fi\fi
    \SOUL@n*%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@dotoken}
% Command sequences from the \cs{\SOUL@cmds} list are handed over
% to \cs{\SOUL@docmd}, everything else it added to \cs{\SOUL@word},
% which will be fed to the analyzer every time a word is completed. The
% two branches are necessary to check for active characters as well
% as for `normal' macro names. (The \package{german} package uses
% |"| as an active character that takes one argument.)   
%
%    \begin{macrocode}
\def\SOUL@dotoken#1{%
    \def\SOUL@@{\SOUL@addtoken{#1}}%
    \ifcat\noexpand#1\noexpand\end
        \def\\##1##2{%
            \ifx##2#1%
                \def\SOUL@@{\SOUL@docmd{##1}{#1}}%
            \fi
        }%
    \else
        \def\\##1##2{%
            \if\noexpand#1\noexpand##2%
                \def\SOUL@@{\SOUL@docmd{##1}{#1}}%
            \fi
        }%
    \fi
    \the\SOUL@cmds
    \SOUL@@    
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@docmd}
% Here we deal with commands that were registered with \cs{\soulaccent}
% or \cs{\soulfont} or were already predefined in \cs{\SOUL@cmds}.
% Commands with the |9| identifier are accents that are put in a
% group with their argument. The others are mostly (but not necessarily)
% font switching commands, which may (|1|) or may not (|0|) take
% an argument. They let the current word be typeset and are simply
% executed.
%
%    \begin{macrocode}
\def\SOUL@docmd#1#2{%
    \ifx9#1%
        \def\SOUL@@{\SOUL@addgroup{#2}}%
    \else\ifx1#1%
        \SOUL@doword
        \def\SOUL@@{\SOUL@dofont{#2}}%
    \else
        \SOUL@doword
        #2%
        \def\SOUL@@{\SOUL@scan}%
    \fi\fi
    \SOUL@@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@dofont}
% Font switching commands which take an argument need special
% treatment: They need to increment the level counter, so that
% \cs{\SOUL@eval} knows where to stop scanning. Furthermore the
% scanner has to be enabled to see the next token after the opening
% brace.
%
%    \begin{macrocode}
\def\SOUL@dofont#1{%
    #1%
    \bgroup
    \advance\SOUL@level\@ne    
    \afterassignment\SOUL@scan
    \let\SOUL@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@addgroup}
% \begin{macro}{\SOUL@addmath}
% \begin{macro}{\SOUL@addprotect}
% \begin{macro}{\SOUL@addtoken}
% The macro names say it all. Each of these macros adds some
% token to \cs{\SOUL@word}.
%
%    \begin{macrocode}
\def\SOUL@addgroup#1#2{%
    \edef\x{\SOUL@word={\the\SOUL@word{{\noexpand#1#2}}}}\x
    \SOUL@scan
}
\def\SOUL@addmath$#1${%
    \edef\x{\SOUL@word={\the\SOUL@word{{\hbox{$#1$}}}}}\x
    \SOUL@scan
}    
\def\SOUL@addprotect#1#2{%
    \edef\x{\SOUL@word={\the\SOUL@word{{\hbox{#2}}}}}\x
    \SOUL@scan
}
\def\SOUL@addtoken#1{%
    \edef\x{\SOUL@word={\the\SOUL@word\noexpand#1}}\x
    \SOUL@scan
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@cmds}
% Here is a list of pre-registered commands that the analyzer
% cannot handle, so the scanner has to look after them. Every
% entry consists of a handle (\cs{\\}), an identifier and the
% macroname. The class identifier can be |9| for accents,
% |0| for commands without arguments and |1| for commands that
% take one argument. Commands with two or more arguments are
% not dealt with.
%
%    \begin{macrocode}
\SOUL@cmds={%
    \\9\`\\9\'\\9\^\\9\"\\9\~\\9\=\\9\.%
    \\9\u\\9\v\\9\H\\9\t\\9\c\\9\d\\9\b
    \\0\S\\0\textregistered\\0\copyright
    \\1\emph\\1\textrm\\1\textsf\\1\texttt\\1\textmd\\1\textbf
    \\1\textup\\1\textsl\\1\textit\\1\textsc\\1\textnormal
    \\0\rmfamily\\0\sffamily\\0\ttfamily\\0\mdseries\\0\upshape
    \\0\slshape\\0\itshape\\0\scshape\\0\normalfont
    \\0\em\\0\rm\\0\bf\\0\it\\0\tt
    \\0\tiny\\0\scriptsize\\0\footnotesize\\0\small
    \\0\normalsize\\0\large\\0\Large\\0\LARGE\\0\huge\\0\Huge
    \\1\textfrak\\1\textswab\\1\textgoth
    \\0\frakfamily\\0\swabfamily\\0\gothfamily
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\soulfont}
% \begin{macro}{\soulaccent}
% Register a font switching command (or even some other command) to the
% scanner. The first argument is the number of arguments (|0| or |1|),
% the second is the macro name. Example: |\soulfont{0}{\bold}|.
% \cs{\soulaccent} has only one argument---the accent macro name.
% Example: |\soulaccent{\~}|. It is a shortcut for |\soulfont{9}{\~}|.
%
%    \begin{macrocode}
\def\soulfont#1#2{{%
    \edef\x{\global\SOUL@cmds={\the\SOUL@cmds
        \noexpand\\#1\noexpand#2}}\x
}}
\def\soulaccent#1{\soulfont9{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The analyzer}
%
% \begin{macro}{\SOUL@doword}
% The only way to find out, where a given word can be broken into
% syllables, is to let \TeX\ actually typeset the word under conditions
% that enforce every possible hyphenation. The result is a box with one
% line for every syllable.
%
%    \begin{macrocode}
\def\SOUL@doword{%
    \edef\x{\the\SOUL@word}%
    \ifx\x\empty
    \else
        \SOUL@buffer={}%
        \setbox\z@\vbox{%
            \SOUL@tt
            \hyphenchar\font`\-
            \hfuzz\maxdimen
            \hbadness\@M
            \pretolerance\m@ne
            \tolerance\@M
            \leftskip\z@
            \rightskip\z@
            \hsize1sp
            \everypar{}%
            \parfillskip\z@\@plus1fil
            \hyphenpenalty-\@M
            \noindent
            \hskip\z@
            \relax
            \the\SOUL@word}%
        \let\SOUL@errmsg\SOUL@error
        \let\-\relax
        \count@\m@ne
        \SOUL@analyze
        \SOUL@word={}%
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \noindent
% We store the width of the hyphen character of the |cmtt10| font,
% because we need it in |\SOUL@doword|. (|cmtt10| is a fixed width
% font, so every other character would have worked, too.)
% 
%    \begin{macrocode}
\setbox\z@\hbox{\SOUL@tt-}
\newdimen\SOUL@ttwidth
\SOUL@ttwidth\wd\z@
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@analyze}
% This macro decomposes the box that |\SOUL@doword| has built.
% Because we have to start at the bottom, we put every 
% syllable onto the stack and execute ourselves recursively. If there
% are no syllables left, we return from the recursion and pick syllable
% after syllable from the stack again---this time from top to bottom---and
% hand the syllable width |\SOUL@syllgoal| over to |\SOUL@dosyllable|.
% All but the last syllable end with the hyphen character, hence
% we subtract the hyphen width.
%
%    \begin{macrocode}
\def\SOUL@analyze{{%
    \setbox\z@\vbox{%
        \unvcopy\z@
        \unskip
        \unpenalty
        \global\setbox\@ne=\lastbox}%
    \ifvoid\@ne
    \else
        \setbox\@ne\hbox{\unhbox\@ne}%
        \SOUL@syllgoal=\wd\@ne
        \advance\count@\@ne
        \SOUL@analyze
        \SOUL@syllwidth\z@
        \SOUL@syllable={}%
        \ifnum\count@>\z@
            \advance\SOUL@syllgoal-\SOUL@ttwidth
            \SOUL@dosyllable
            \SOUL@getkern{\the\SOUL@lasttoken}{\SOUL@hyphkern}%
                {\char\hyphenchar\font}%
            \SOUL@everyhyphen
        \else
            \SOUL@dosyllable
        \fi
    \fi
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@dosyllable}
% This macro typesets token after token from \cs{\SOUL@word}
% until \cs{\SOUL@syllwidth} has reached
% the requested width \cs{\SOUL@syllgoal}. Furthermore the kerning
% values are prepared in case \cs{\SOUL@everytoken} needs them.
%
%    \begin{macrocode}
\def\SOUL@dosyllable{%
    \SOUL@gettoken
    \edef\x{\the\SOUL@token}%
    \ifx\x\SOUL@hyphenhintM
        \let\SOUL@\SOUL@dosyllable
    \else\ifx\x\SOUL@lowerthanM
        \SOUL@gettoken
        \SOUL@getkern{\the\SOUL@lasttoken}{\SOUL@charkern}
            {\the\SOUL@token}%
        \SOUL@everylowerthan
        \SOUL@puttoken    
        \let\SOUL@\SOUL@dosyllable    
    \else\ifdim\SOUL@syllwidth=\SOUL@syllgoal
        \SOUL@everysyllable
        \SOUL@puttoken
        \let\SOUL@\relax
    \else\ifx\x\SOUL@stopM    
        \SOUL@errmsg
        \global\let\SOUL@errmsg\relax
        \let\SOUL@\relax
    \else
        \setbox\tw@\hbox{\SOUL@tt\the\SOUL@token}%
        \advance\SOUL@syllwidth\wd\tw@
        \global\SOUL@lasttoken=\SOUL@token
        \SOUL@gettoken
        \SOUL@getkern{\the\SOUL@lasttoken}{\SOUL@charkern}
            {\the\SOUL@token}%
        \SOUL@puttoken
        \global\SOUL@token=\SOUL@lasttoken    
        \SOUL@everytoken
        \edef\x{\SOUL@syllable={\the\SOUL@syllable\the\SOUL@token}}\x
        \let\SOUL@\SOUL@dosyllable
    \fi\fi\fi\fi
    \SOUL@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@gettoken}
% Read a token from the buffer or fetch a new one.
%
%    \begin{macrocode}
\def\SOUL@gettoken{%
    \edef\x{\the\SOUL@buffer}%
    \ifx\x\empty
        \SOUL@nexttoken
    \else
        \global\SOUL@token=\SOUL@buffer
        \global\SOUL@buffer={}%
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@puttoken}
% The possibility to put tokens back makes the scanner design much
% cleaner. There's only room for one token, though, so we issue
% an error message if \cs{\SOUL@puttoken} is told to put a token
% back while the buffer is still in use. Note the \cs{\SOUL@debug}
% is actually undefined. This won't hurt as it can only happen
% during driver design. No user will ever see this message.
%
%    \begin{macrocode}
\def\SOUL@puttoken{%
    \edef\x{\the\SOUL@buffer}%
    \ifx\x\empty
        \global\SOUL@buffer=\SOUL@token
        \global\SOUL@token={}%
    \else
        \SOUL@debug{puttoken called twice}%
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@nexttoken}
%
%    \begin{macrocode}
\def\SOUL@nexttoken{%
    \edef\x{\the\SOUL@word}%
    \ifx\x\empty
        \SOUL@token={\SOUL@stop}%
    \else
        \expandafter\SOUL@splittoken\the\SOUL@word\SOUL@stop
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@splittoken}
%
%    \begin{macrocode}
\def\SOUL@splittoken#1#2\SOUL@stop{%
    \global\SOUL@token={#1}%
    \global\SOUL@word={#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@getkern}
%
%    \begin{macrocode}
\def\SOUL@getkern#1#2#3{%
    \setbox\tw@\hbox{#1#3}%
    #2\wd\tw@
    \setbox\tw@\hbox{#1\null#3}%
    \advance#2-\wd\tw@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@setkern}
%
%    \begin{macrocode}
\def\SOUL@setkern#1{\ifdim#1=\z@\else\kern#1\fi}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@error}
%
%    \begin{macrocode}
\def\SOUL@error{%
    \vrule\@height.8em\@depth.2em\@width1em
    \PackageError{soul}{Reconstruction failed}{%
        I came across hyphenateable material enclosed in group
        braces,^^Jwhich I can't handle. Either drop the braces or
        make the material^^Junbreakable using an \string\mbox\space
        (\string\hbox). Note that a space^^Jalso counts as possible
        hyphenation point. See p.?? of the manual.^^JI'm leaving
        a black square so that you can see where I am right now.%
    }%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \so{letterspacing} driver}
%
% \begin{macro}{\SOUL@setup}
%
%    \begin{macrocode}
\def\SOUL@setup{%
    \let\SOUL@preamble\relax
    \let\SOUL@postamble\relax
    \let\SOUL@everytoken\relax
    \let\SOUL@everysyllable\relax
    \def\SOUL@everyspace##1{##1\space}%
    \let\SOUL@everyhyphen\relax
    \let\SOUL@everyexhyphen\relax
    \let\SOUL@everylowerthan\relax
}
\SOUL@setup
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@sosetletterskip}
%
%    \begin{macrocode}
\def\SOUL@sosetletterskip{\nobreak\hskip\SOUL@soletterskip}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@sopreamble}
%
%    \begin{macrocode}
\def\SOUL@sopreamble{%
    \ifdim\lastskip>5sp
        \unskip
        \hskip\SOUL@soouterskip
    \fi
    \spaceskip\SOUL@soinnerskip
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@sopostamble}
%
%    \begin{macrocode}
\def\SOUL@sopostamble{%
    \unskip
    \unpenalty    
    \global\skip@=\SOUL@soouterskip
    \aftergroup\SOUL@socheck
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@socheck}
%
%    \begin{macrocode}
\def\SOUL@socheck{%
    \futurelet\SOUL@@\SOUL@sodoouter
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@sodoouter}
%
%    \begin{macrocode}
\def\SOUL@sodoouter{%
    \bgroup
    \aftergroup\kern\aftergroup\z@
    \def\SOUL@n*##1{\hskip\skip@\egroup}%
    \ifx\SOUL@@\SOUL@spc
        \def\SOUL@n* {\hskip\skip@\egroup}%
    \else
        \ifx\SOUL@@~%
        \def\SOUL@n*~{\nobreak\hskip\skip@\egroup}%
    \else\ifx\SOUL@@\ %
    \else\ifx\SOUL@@\space
    \else\ifx\SOUL@@\@xobeysp
    \else
        \def\SOUL@n*{\egroup}%
    \fi\fi\fi\fi\fi
    \SOUL@n*%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@soeverytoken}
%
%    \begin{macrocode}
\def\SOUL@soeverytoken{%
    \edef\x{\the\SOUL@token}%
    \ifx\x\SOUL@lowerthanM
        \unskip
    \else    
        \the\SOUL@token
        \SOUL@setkern\SOUL@charkern
        \SOUL@sosetletterskip
    \fi    
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@soeveryspace}
%
%    \begin{macrocode}
\def\SOUL@soeveryspace#1{%
    \unskip
    \unpenalty
    #1%
    \space
    \kern\z@
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@soeveryhyphen}
%
% gets the last token in |\SOUL@lasttoken|
%    \begin{macrocode}
\def\SOUL@soeveryhyphen{%
    \discretionary{%
        \unkern
        \hbox{%
            \SOUL@setkern\SOUL@hyphkern
            \char\hyphenchar\font
            \penalty\hyphenpenalty
        }%
    }{}{}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@soeveryexhyphen}
%
%    \begin{macrocode}
\def\SOUL@soeveryexhyphen#1{%
    #1%
    \penalty\exhyphenpenalty
    \SOUL@sosetletterskip
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@soeverylowerthan}
%
%    \begin{macrocode}
\def\SOUL@soeverylowerthan{%
    \unskip
    \unpenalty
    \SOUL@setkern\SOUL@charkern
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@sosetup}
%
%    \begin{macrocode}
\def\SOUL@sosetup{%
    \SOUL@setup
    \let\SOUL@preamble\SOUL@sopreamble
    \let\SOUL@postamble\SOUL@sopostamble
    \let\SOUL@everytoken\SOUL@soeverytoken
    \let\SOUL@everyspace\SOUL@soeveryspace
    \let\SOUL@everyhyphen\SOUL@soeveryhyphen
    \let\SOUL@everyexhyphen\SOUL@soeveryexhyphen
    \let\SOUL@everylowerthan\SOUL@soeverylowerthan
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@setso}
%
%    \begin{macrocode}
\def\SOUL@setso#1#2#3{%
    \def\SOUL@soletterskip{#1}%
    \def\SOUL@soinnerskip{#2}%
    \def\SOUL@soouterskip{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\sodef}
%
%    \begin{macrocode}
\def\sodef#1#2#3#4#5{%
    \DeclareRobustCommand*#1{\SOUL@sosetup
        \def\SOUL@preamble{%
            \SOUL@setso{#3}{#4}{#5}%
            #2%
            \SOUL@sopreamble
        }%
        \SOUL@
    }%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\resetso}
%
%    \begin{macrocode}
\def\resetso{%
    \sodef\textso{}{.25em}{.65em\@plus.08em\@minus.06em}%
        {.55em\@plus.275em\@minus.183em}%
}
\resetso
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\sloppyword}
%
%    \begin{macrocode}
\sodef\sloppyword{%
    \linepenalty10
    \hyphenpenalty10
    \adjdemerits\z@
    \doublehyphendemerits\z@
    \finalhyphendemerits\z@
    \emergencystretch.1em}%
    {\z@\@plus.1em}%
    {.33em\@plus.11em\@minus.11em}%
    {.33em\@plus.11em\@minus.11em}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \caps{caps} driver}
%
% \begin{macro}{\caps}
%
%    \begin{macrocode}
\expandafter\ifx\csname documentclass\endcsname\relax
\let\capsfont\relax
\let\capsreset\relax
\def\capsdef#1#2#3#4#5{}
\def\capssave#1{}
\sodef\caps{\capsfont}
    {.028em\@plus.005em\@minus.01em}%
    {.37em\@plus.1667em\@minus.111em}%
    {.37em\@plus.1em\@minus.14em}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\capsreset}
%
%    \begin{macrocode}
\else
\DeclareRobustCommand\capsreset{%
    \let\SOUL@capsbase\empty
    \SOUL@capsdefault
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\capsdef}
%
%    \begin{macrocode}
\def\capsdef#1#2#3#4#5{{%
    \toks\z@{\\{#1/#2/#3/#4/#5}}%
    \toks\tw@=\expandafter{\SOUL@capsbase}%
    \xdef\SOUL@capsbase{\the\toks\z@\the\toks\tw@}%
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\capssave}
%
%    \begin{macrocode}
\DeclareRobustCommand*\capssave[1]{%
    \expandafter\global\expandafter\let
        \csname SOUL@@\string#1\endcsname\SOUL@capsbase
    \def\SOUL@next##1{\DeclareRobustCommand*#1{\let\SOUL@capsbase##1}}%
    \expandafter\SOUL@next\expandafter{%
        \csname SOUL@@\string#1\endcsname}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@capsfind}
% \begin{macro}{\SOUL@caps}
%
%    \begin{macrocode}
\def\SOUL@capsfind#1/#2/#3/#4/#5/#6/#7/#8/#9/{%
    \let\SOUL@match=1%
    \SOUL@chk{#1}\f@encoding
    \SOUL@chk{#2}\f@family
    \SOUL@chk{#3}\f@series
    \SOUL@chk{#4}\f@shape
    \SOUL@dimchk{#5}\f@size
    \if\SOUL@match1%
        \let\\\@gobble
        \gdef\SOUL@caps{%
            \SOUL@sosetup
            \def\SOUL@preamble{\SOUL@setso{#7}{#8}{#9}#6%
                \SOUL@sopreamble}%
            \SOUL@}%
    \fi
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@chk}
%
%    \begin{macrocode}
\def\SOUL@chk#1#2{%
    \if$#1$%
    \else
        \def\SOUL@n{#1}%
        \ifx#2\SOUL@n\else\let\SOUL@match=0\fi
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@dimchk}
% \begin{macro}{\SOUL@rangechk}
%
%    \begin{macrocode}
\def\SOUL@dimchk#1#2{\if$#1$\else\SOUL@rangechk{#2}#1--\@ne\@@\fi}
\def\SOUL@rangechk#1#2-#3-#4\@@{%
    \count@=#4%
    \ifnum\count@>\z@
        \ifdim#1\p@=#2\p@\else\let\SOUL@match=0\fi
    \else
        \dimen@=\if$#2$\z@\else#2\p@\fi
        \ifdim#1\p@<\dimen@\let\SOUL@match=0\fi
        \dimen@=\if$#3$\maxdimen\else#3\p@\fi
        \ifdim#1\p@<\dimen@\else\let\SOUL@match=0\fi
    \fi
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\textcaps}
%
%    \begin{macrocode}
\DeclareRobustCommand*\textcaps{{%
    \def\\##1{\expandafter\SOUL@capsfind##1/}%
    \SOUL@capsbase
    \aftergroup\SOUL@caps
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@capsdefault}
%
%    \begin{macrocode}
\def\SOUL@capsdefault{%
    \capsdef{////}%
    \SOUL@capsdfltfnt
    {.028em\@plus.005em\@minus.01em}%
    {.37em\@plus.1667em\@minus.1em}%
    {.37em\@plus.111em\@minus.14em}%
}
\let\SOUL@capsdfltfnt\scshape
\capsreset
\fi
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \ul{underlining} driver}
%
% \begin{macro}{\SOUL@ulleaders}
%
%    \begin{macrocode}
\newdimen\SOUL@uldp
\newdimen\SOUL@ulht
\def\SOUL@ulleaders{%
    \leaders\hrule\@depth\SOUL@uldp\@height\SOUL@ulht\relax
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@ulunderline}
%
%    \begin{macrocode}
\def\SOUL@ulunderline#1{{%
    \setbox\z@\hbox{#1}%
    \dimen@=\wd\z@
    \dimen@i=\SOUL@uloverlap
    \advance\dimen@2\dimen@i
    \rlap{%
        \null\kern-\dimen@i
        \SOUL@ulcolor{\SOUL@ulleaders\hskip\dimen@}%
    }%
    \unhcopy\z@
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@ulpreamble}
%
%    \begin{macrocode}
\def\SOUL@ulpreamble{%
    \SOUL@uldp=\SOUL@uldepth
    \SOUL@ulht=-\SOUL@uldp
    \advance\SOUL@uldp\SOUL@ulthickness
    \spaceskip=\fontdimen\tw@\font\@plus\fontdimen\thr@@\font
        \@minus\fontdimen4\font
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@uleverysyllable}
%
%    \begin{macrocode}
\def\SOUL@uleverysyllable{%
    \SOUL@ulunderline{%
        \the\SOUL@syllable
        \SOUL@setkern\SOUL@charkern
    }%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@uleveryspace}
%
%    \begin{macrocode}
\def\SOUL@uleveryspace#1{%
    \SOUL@ulcolor{%
        #1%
        \SOUL@ulleaders
        \hskip\spaceskip
    }%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@uleveryhyphen}
%
%    \begin{macrocode}
\def\SOUL@uleveryhyphen{%
    \discretionary{%
        \hbox{%
            \unkern
            \SOUL@ulunderline{%
                \SOUL@setkern\SOUL@hyphkern
                \char\hyphenchar\font
            }%
        }%
    }{}{}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@uleveryexhyphen}
%
%    \begin{macrocode}
\def\SOUL@uleveryexhyphen#1{%
    \SOUL@ulunderline{#1}%
    \penalty\exhyphenpenalty
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@ulcolor}
% \begin{macro}{\setulcolor}
%
%    \begin{macrocode}
\let\SOUL@ulcolor\relax
\def\setulcolor#1{%
    \if$#1$
        \let\SOUL@ulcolor\relax
    \else    
        \def\SOUL@ulcolor{\textcolor{#1}}%
    \fi
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\setuloverlap}
% \begin{macro}{\SOUL@uloverlap}
%
%    \begin{macrocode}
\def\setuloverlap#1{\def\SOUL@uloverlap{#1}}
\setuloverlap{.25pt}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@ulsetup}
%
%    \begin{macrocode}
\def\SOUL@ulsetup{%
    \SOUL@setup
    \let\SOUL@preamble\SOUL@ulpreamble
    \let\SOUL@everysyllable\SOUL@uleverysyllable
    \let\SOUL@everyspace\SOUL@uleveryspace
    \let\SOUL@everyhyphen\SOUL@uleveryhyphen
    \let\SOUL@everyexhyphen\SOUL@uleveryexhyphen
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@textul}
%
%    \begin{macrocode}
\DeclareRobustCommand*\textul{\SOUL@ulsetup\SOUL@}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\setul}
% \begin{macro}{\SOUL@uldepth}
% \begin{macro}{\SOUL@ulthickness}
%
%    \begin{macrocode}
\def\setul#1#2{%
    \if$#1$\else\def\SOUL@uldepth{#1}\fi
    \if$#2$\else\def\SOUL@ulthickness{#2}\fi
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\resetul}
%
%    \begin{macrocode}
\def\resetul{\setul{.65ex}{.1ex}}
\resetul
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\setuldepth}
%
%    \begin{macrocode}
\def\setuldepth#1{{%
    \def\SOUL@n{#1}%
    \setbox\z@\hbox{%
        \tracinglostchars\z@
        \ifx\SOUL@n\empty
            \count@\z@
            \loop
                \ifnum\catcode\count@=11\char\count@\fi
            \ifnum\count@<\@cclv
                \advance\count@\@ne
            \repeat
        \else
        #1%
        \fi
    }%
    \dimen@\dp\z@
    \advance\dimen@\p@
    \xdef\SOUL@uldepth{\the\dimen@}%
}}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \st{overstriking} driver}
%
% \begin{macro}{\SOUL@stpreamble}
%
%    \begin{macrocode}
\def\SOUL@stpreamble{%
    \dimen@\SOUL@ulthickness
    \dimen@i=-.5ex
    \advance\dimen@i-.5\dimen@
    \edef\SOUL@uldepth{\the\dimen@i}%
    \let\SOUL@ulcolor\SOUL@stcolor
    \SOUL@ulpreamble
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@stsetup}
%
%    \begin{macrocode}
\def\SOUL@stsetup{%
    \SOUL@ulsetup
    \let\SOUL@preamble\SOUL@stpreamble
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\textst}
%
%    \begin{macrocode}
\DeclareRobustCommand*\textst{\SOUL@stsetup\SOUL@}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@stcolor}
% \begin{macro}{\setstcolor}
%
%    \begin{macrocode}
\let\SOUL@stcolor\relax
\def\setstcolor#1{%
    \if$#1$
        \let\SOUL@stcolor\relax
    \else
        \def\SOUL@stcolor{\textcolor{#1}}%
    \fi
}    
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The \hl{highlighting} driver}
%
% \begin{macro}{\SOUL@hlpreamble}
%
%    \begin{macrocode}
\def\SOUL@hlpreamble{%
    \setul{}{2.5ex}%
    \let\SOUL@stcolor\SOUL@hlcolor
    \SOUL@stpreamble
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\SOUL@hlsetup}
%
%    \begin{macrocode}
\def\SOUL@hlsetup{%
    \SOUL@stsetup
    \let\SOUL@preamble\SOUL@hlpreamble    
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \begin{macro}{\texthl}
% \begin{macro}{\sethlcolor}
% \begin{macro}{\SOUL@hlcolor}
%
%    \begin{macrocode}
\DeclareRobustCommand*\texthl{\SOUL@hlsetup\SOUL@}
\def\sethlcolor#1{\if$#1$\else\def\SOUL@hlcolor{\textcolor{#1}}\fi}
\sethlcolor{yellow}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% \subsection{The package postamble}
%
% \begin{macro}{\so}
% \begin{macro}{\ul}
% \begin{macro}{\st}
% \begin{macro}{\hl}
% \begin{macro}{\caps}
%
%    \begin{macrocode}
\let\so\textso
\let\ul\textul
\let\st\textst
\let\hl\texthl
\let\caps\textcaps
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\expandafter\ifx\csname documentclass\endcsname\relax
    \expandafter\ifx\csname mdqoff\endcsname\relax
    \else
        \soulaccent{"}%
    \fi
    \def\setulcolor#1{}
    \let\setstcolor\setulcolor
    \let\sethlcolor\setulcolor
    \let\hl\ul
    \catcode`\@=\atcode
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
%    \begin{macrocode}
\else
    \AtBeginDocument{%
        \@ifundefined{color}{%
            \let\SOUL@color\relax
            \let\setulcolor\@gobble
            \let\setstcolor\@gobble
            \let\sethlcolor\@gobble
            \let\hl\ul
        }{}
        \@ifundefined{mdqoff}{}{\soulaccent{"}}
    }
    \DeclareOption{capsdefault}{%
        \AtBeginDocument{%
            \def\SOUL@capsdfltfnt#1{\SOUL@ulsetup\SOUL@ulpreamble}%
        }%
    }
    \InputIfFileExists{soul.cfg}%
        {\PackageInfo{soul}{Local config file soul.cfg used}}{}
    \ProcessOptions
\fi
\endinput
%    \end{macrocode}
%
%
%
%
%^^A--------------------------------------------------------------------
%
%
%
%
% ^^A ?????
% \describemacro{\setstcolor}\par
% \describemacro{\sethlcolor}\par
% \describemacro{\soulaccent}\par
% \describemacro{\soulfont}\par
% \label{sec:soulaccent}
% \label{sec:soulfont}
% \Finale
% 
%                                     
%                                                       ^^A.E.I.O.U.^^
%^^A vim:ts=4:sw=4:et
